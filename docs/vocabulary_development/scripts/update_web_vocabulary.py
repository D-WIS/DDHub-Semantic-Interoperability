import re
import os
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
from urllib3.exceptions import InsecureRequestWarning
import hashlib
from datetime import datetime,timezone
from dateutil import parser
from bs4 import BeautifulSoup



# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

########################################################################################
#
# Author: Espen Solbu (NOV), espen.solbu@nov.com
# Revision: July 8 - 2022
#
#
########################################################################################
# Description:
# - Script that will Update Glossary terms on the D-WIS Web Page with terms
#   from the GitHub repository
# - The script is intended for use in combination with GitHub actions to 
#   automatically publish to the web page when terms are changed in github
# - The script parses the generated DWISvocabulary.md file for definitions
# - The script will try to determine if the term already exists, and if it has been 
#   changed. It will perform a POST for new terms, and a POST to /glossary/id for 
#   existing terms. It will use the date of the last commit affecting DWISvocabulary.md
#   and the publish date to determine this
# 
# Environment Variables:
# - WORDPRESS_USER: username for the wordpress user the sript should use
# - WORDPRESS_APPLICATION_PASSWORD: The application password the script should use
# - WORDPRESS_URL: URL for the target page (not including api)
# - WORDPRESS_USE_REST_ROUTE: Set to true to use the "?rest_route" (default on the DWIS)
# - FORCE_UPDATE: Force the script to update terms, even if no changes have been detected
# - FORCE_DELETION: Force the scritp to remove existing terms before publishing new ones
# 
# Installation/Preperations:
# - You must have python and pip installed to run this script, then run
#   'pip install -r requirements.txt'
#   to install the dependencies
#
# Usage:
# - python update_web_vocabulary.py
# 
#
# Other Information:
# - API Documentation for the Glossary, can be found together with the other
#   Wordpress API documentation at https://adams210.sg-host.com/wp-json
#   <URL>/wp-json
# - Wordpress generic API Documentation: 
#   https://developer.wordpress.org/rest-api/extending-the-rest-api/routes-and-endpoints/
#
# Open Questions
# - We can choose to set passwords on the terms, this will allow the tooltip of the term,
#   but prevent viewing and editing of the term page. Should we do this?

########################################################################################
#
# Configuration
#
########################################################################################
# Modify for output format, %s will get replaced with the definition from the MarkDown "Description" field
descriptionTemplate = """
<p>%description</p><br>
<p><i>Content autogenerated from <a href="https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development">GitHub</a> (<a href="https://github.com/D-WIS/DDHub-Semantic-Interoperability/commit/%sha">commit</a>)</i>
<div style="display: none;" id="github_modified_date">%modifiedDate</div>
<script>
    links = document.getElementsByTagName("a");
    for (let link of links) {
        if (link.className!=="menu-link") {
            link.href=link.href.replace("/glossary/","/vocabulary-index/");
        }
    }
</script>
</p>
"""

excerptTemplate = """
<p>%description</p><br>
<p><i>Content autogenerated from <a href="https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development">GitHub</a></i>
"""
maxTerms = -1 # Set to -1 to do all terms, set to another number to stop after n terms (for debug purposes)
publishTheseTermTypes = ["Noun","Verb","Definition"]
per_page = 100 # 1-100, how many terms to collect from the webpage at the same time

#########################################################################################


#########################################################################################
# 
# Main script
#
#########################################################################################
load_dotenv()

def generateUrl(endpoint):
    """Convenience method to construct the correct API URL's depending on the rest_route pattern
    for the page
    """
    wordpress_url = os.getenv("WORDPRESS_URL")
    if wordpress_url[-1]!="/":
        wordpress_url = wordpress_url+"/"
    use_rest_route = os.getenv("WORDPRESS_USE_REST_ROUTE","true").lower()
    if use_rest_route!="false":
        use_rest_route=True

    if use_rest_route:
        url = wordpress_url+"?rest_route="+endpoint
    else:
        url = wordpress_url+endpoint
    return url


def printTermLine(t,header=False):
    if header:
        print(f"{'Id':<7} {'Title':<40} {'date'}")
        print("-"*80)
    else:
        print(f"{t['id']:<7} {t['title']['rendered']:<40} {t['date']:<20}")


# grab the date of the last commit
print("Checking the previous commits...")
source_path = os.getenv("SOURCE_PATH","../auto-generated/md").strip()
print(f"Path of the source file: {source_path}/DWISvocabulary.md")
stream = os.popen(f"git log -1 --format=%cd -- {source_path}/DWISvocabulary.md")
gitdateString = stream.read()
print("GitDate String: ",gitdateString)
gitdate = parser.parse(gitdateString)

stream = os.popen(f"git log -n 1 --pretty=format:%H -- {source_path}/DWISvocabulary.md")
gitCommitSha = stream.read().strip()

print("Git Date: ",gitdate)
print("Git SHA: ",gitCommitSha)
#exit()

wordpress_user = os.getenv("WORDPRESS_USER")
wordpress_application_password = os.getenv("WORDPRESS_APPLICATION_PASSWORD",None)
if wordpress_application_password==None:
    print("No WORDPRESS_APPLICATION_PASSWORD set")
    exit(1)
session = requests.Session()
#print(wordpress_user,wordpress_application_password)
auth = HTTPBasicAuth(wordpress_user, wordpress_application_password)

print("Collect categories from the web page") # we are doing this to collect the id of the "Vocabulary" category
url_categories = generateUrl("/wp/v2/glossary-categories")
r = requests.get(url_categories,verify=False,auth=auth)
if r.status_code!=200:
    print(f"Error, collecting categories from the Wordpress API failed with status code {r.status_code}")
    print(r)
    exit(1)

categories = r.json()
vocabulary_category=None
for category in categories:
    print("  ",category["id"],category["name"],end="")
    if category["name"]=="Vocabulary":
        print(" <---")
        vocabulary_category = int(category["id"])

    print()

if vocabulary_category==None:
    print("Error, we did not find the 'Vocabulary' category. Aborting...")
    exit(1)
else:
    print(f"The id of the Vocabulary category is '{vocabulary_category}'")

# get current glossary from web page:
print("Collect current glossary from the web page...")
offset = 0

url_glossary = generateUrl("/wp/v2/glossary")
print(url_glossary)
glossary={}
complete = False

force_update = (os.getenv("FORCE_UPDATE","False")).lower() in ("yes","true","1")
force_deletion = (os.getenv("FORCE_DELETION","False")).lower() in ("yes","true","1")

printTermLine({},True)
while not complete:
    r = requests.get(url_glossary,verify=False,auth=auth,params={'per_page':per_page, 'offset':offset})
    if r.status_code!=200:
        print(f"Error, connecting to Wordpress API failed with status code {r.status_code}")
        exit(1)

    current_content = r.json()
    #print(r.json())

    for t in current_content:
        if "<" in t["title"]["rendered"]:
            name = t["title"]["rendered"].split("<")[0].strip()
        else:
            name = t["title"]["rendered"].strip()
        t["title"]["rendered"] = name
        content = t["content"]["rendered"].strip()
        md5=None

        #t["hash"]=hashlib.md5(content.encode()).hexdigest() # replace with content from object id=md5
        # if "md5" in content:
        #     md5Start = content.find("md5")+5
        #     md5End = content.find("<",md5Start)
        #     md5 = content[md5Start:md5End]

        # t["hash"] = md5

        soup = BeautifulSoup(content,features="html.parser")
        try:
            github_modified_date = datetime.fromisoformat(soup.find("div",{"id":"github_modified_date"}).getText())
        except:
            github_modified_date = datetime(1990, 1, 1, 0, 0)
        
        github_modified_date = github_modified_date.replace(tzinfo=timezone.utc)
        
        #print(f"{t['id']:<7} {t['title']['rendered']:<40} {t['hash']}")
        printTermLine(t)
        #print(t.keys())
        glossary[t["title"]["rendered"]] = {
            #'hash': t["hash"],
            'id':t["id"],
            'content':content,
            'date': t["date"],
		    'date_gmt': t["date_gmt"],
    		'modified': t["modified"],
		    'modified_gmt': t["modified_gmt"],
            'author_id':t["author"],
            'github_modified_date' : github_modified_date
        }
    if len(current_content)>0:
        offset = offset + per_page
    else:
        complete=True
print("-"*79)
print(f"{len(glossary.keys())} existing terms collected from web page...")
print()

#exit()
# loop over github glossaries

print("Collect GitHub terms...")
with open(f"{source_path}/DWISvocabulary.md","r") as fp:
    lines = fp.readlines()

noun = None
o = None
terms = []
for line in lines:
    # if "<!-- NOUN -->" in line:
    #     #print(line)
    #     noun = line.replace("##","").replace("<!-- NOUN -->","").strip()
    #     print(noun)
    # if "Description"
    if "##" in line:
        # we already have an object, push it to the list
        if o:
            if "Description" not in o.keys():
                o["Description"] = ""
            terms.append(o)
            o = None

        objectType = None
        if "<!-- NOUN -->" in line:
            objectType = "Noun"
        elif "<!-- VERB -->" in line:
            objectType = "Verb"
        elif "<!-- DEFINITION" in line:
            objectType = "Definition"
        objectName = line.replace("##","").replace("<!-- NOUN -->","").replace("<!-- VERB -->","").replace("<!-- DEFINITION SET HEADER -->","").strip()
        print(objectType,objectName)
        o = {'name': objectName, 'type':objectType}
    elif ":" in line and objectType!=None: 
        key = line.replace("- ","").strip().split(":")[0]
        value = line[line.index(":")+1:].strip()
        o[key]=value

        #print(key,value)

print(f"{len(terms)} terms collected from github...")







cnt = 0
newTerms = 0
updatedTerms = 0
unchangedTerms = 0
for o in terms:
    if o['type'] in publishTheseTermTypes:
        #print(o["type"])
        #print(f"{o['name']}")
        descriptionLine = f"No Description has been defined for the {o['type']} '{o['name']}' in GitHub"
        #if "Description" in o.keys():
        if o["Description"]!="":
            #print(o["Description"])
            
            descriptionLine = f"{o['type']}, {o['Description']}"
            
            # see if we have a 

        else:
            #print("Description missing for the {} '{}' in the GitHub repository. Please add it there.".format(o["type"],o["name"]))
            #print("NO DESCRIPTION!!")
            pass
        #print(descriptionLine)
        term = o['name']
        
        #descriptionHash = hashlib.md5(descriptionLine.encode()).hexdigest()
        publishDescription = descriptionTemplate.replace("%description",descriptionLine).replace("%sha",gitCommitSha).replace("%modifiedDate",datetime.utcnow().isoformat())
        publishExcerpt = excerptTemplate.replace("%description",descriptionLine)
        #descriptionHash = hashlib.md5(publishDescription.encode()).hexdigest()

        # new or existing term?
        #print(f"checking if '{term}' exists in glossary already")
        #print(glossary.keys())
        # If force deletion
        data = {
            'title':term, 
            'content':publishDescription, 
            "status":"publish",
            "excerpt":publishExcerpt,
            "glossary-categories": [vocabulary_category]
            }

        if force_deletion:
            # Will delete existing items, force creation of new items
            if term in glossary.keys():
                u = generateUrl(f"/wp/v2/glossary/{glossary[term]['id']}")
                #data = {'title':term, 'content':publishDescription, "status":"publish"}
                r = requests.delete(u,verify=False,auth=auth)
                del glossary[term]



        if term in glossary.keys():
            # Existing term

            

            print(f"'{term}' is an existing term...")
            #data = {'title':term, 'content':publishDescription, "status":"publish"}

            termDate = parser.parse(glossary[term]['date_gmt'])
            termDate = termDate.replace(tzinfo=timezone.utc)
            termModifiedDate = parser.parse(glossary[term]['modified_gmt'])
            termModifiedDate = termModifiedDate.replace(tzinfo=timezone.utc)
            termGithubModifiedDate = glossary[term]['github_modified_date']


            #print(f"{gitdate} {termDate} {termModifiedDate} {gitdate-termDate} {gitdate-termModifiedDate} {gitdate==termDate} {glossary[term]['date']} {glossary[term]['date_gmt']} {glossary[term]['modified']} {glossary[term]['modified_gmt']}")

            timeDeltaBetweenGithubAndWeb = abs((termModifiedDate-termGithubModifiedDate).total_seconds())
            #print(timeDeltaBetweenGithubAndWeb)

            #print(f"{termModifiedDate} {termGithubModifiedDate} {termModifiedDate-termGithubModifiedDate}")

            #if descriptionHash != glossary[term]["hash"] or force_update:
            execute_update = False
            if force_update:
                execute_update=True
                update_reason = "Forced Update"
            if timeDeltaBetweenGithubAndWeb>10:
                execute_update=True
                update_reason = "Term has been modified on the web page"
            if gitdate!=termDate:
                execute_update=True
                update_reason = "Github commit date is different from term published date"

            if execute_update:
                # Description has changed
                # print(f"New: {descriptionHash}\t'{publishDescription}'")
                # print(f"Old: {glossary[term]['hash']}\t{glossary[term]['content']}")
                data["date_gmt"]= gitdate
                data["modified_gmt"]= gitdate


                print(f"\t Change detected ({update_reason}). Updating...")
                u = generateUrl(f"/wp/v2/glossary/{glossary[term]['id']}")
                #data = {'title':term, 'content':publishDescription, "status":"publish"}
                r = requests.post(u,verify=False,auth=auth,data=data)
                
                if r.status_code<300:
                    updatedTerms += 1
                else:
                    print("Unexpected status code:")
                    print(r)
            else:
                print(f"\tUnchanged...")
                unchangedTerms += 1
        else:
            print(f"Publish New '{term}'")
            data["date_gmt"]= gitdate
            data["modified_gmt"]= gitdate
            #data = {'title':term, 'content':publishDescription,"status":"publish"}
            r = requests.post(url_glossary,verify=False,auth=auth,data=data)
            if r.status_code<300:
                newTerms += 1
            else:
                print("Unexpected status code:")
                print(r)
                
        
        cnt = cnt +1
        if maxTerms!=-1 and cnt >=maxTerms:
            print(f"Max terms (debug setting={maxTerms}) hit. Early abort...")
            break

print("Completed...")
print(f"\tUpdated {updatedTerms} terms")
print(f"\tCreated {newTerms} terms")
print(f"\tSkipped {unchangedTerms} terms")


