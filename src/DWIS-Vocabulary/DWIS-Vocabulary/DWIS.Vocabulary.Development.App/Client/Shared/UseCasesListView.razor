@using DWIS.Vocabulary.Development.App.Shared;
@inject IGitHubManager Manager;

<h3>Use cases</h3>

<p>
Below is the list of use cases stored in the main branch of the repository. 
</p>

<hr />
Add a new use case: <button @onclick="() => Manager.AddUseCase(_newUseCaseName) "><img src="/css/open-iconic/svg/plus.svg" class="img-fluid ml-3 mr-3" height="20" width="20" />  <input class="form-control" type="text" @bind="_newUseCaseName" /></button>

<hr />
    <table class="table table-striped  table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Store path</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < _useCases?.Count; i++)
            {
                int idx = i;
            <tr>
                <td>
                    @_useCases?[idx].StoredInstance.Name
                </td>
                <td>@_useCases?[idx].Path</td>
                <td>
                    <img src="/css/open-iconic/svg/pencil.svg" class="img-fluid ml-3 mr-3" height="20" width="20" alt="trash" @onclick="@(()=> _current = _useCases?[idx])">
                </td>
                <td>
                    <img src="/css/open-iconic/svg/trash.svg" class="img-fluid ml-3 mr-3" height="20" width="20" alt="trash" @onclick="@(() =>_useCases?.RemoveAt(idx))">
                </td>
            </tr>
            }
        </tbody>
        </table>



<InstanceEditor UseCase="_current"></InstanceEditor>


@code {
    private List<EditableUseCase>? _useCases = null;

    private EditableUseCase? _current = null;

    private string _newUseCaseName = "NewUseCase";

    protected override async Task OnInitializedAsync()
    {
        _useCases =  await Manager.GetUseCases();
    }
}
