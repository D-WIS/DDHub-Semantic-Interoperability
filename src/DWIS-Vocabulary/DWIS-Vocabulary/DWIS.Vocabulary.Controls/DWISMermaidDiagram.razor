<MermaidDiagram Definition="@_mermaidCode">

</MermaidDiagram>

@code {
    private string _mermaidCode = "";


    protected override Task OnParametersSetAsync()
    {
        UpdateDiagram();
        return base.OnParametersSetAsync();
    }

    [Parameter]
    public DWIS.Vocabulary.Development.DWISInstance DWISInstance { get; set; }

    [Parameter]
    public bool ShowNouns { get; set; }

    public void UpdateDiagram()
    {
        if (DWISInstance != null)
        {
            _mermaidCode = GetDiagramCode(DWISInstance);
            
            ShouldRender();
        }
    }

    public static string GetDiagramCode(DWIS.Vocabulary.Development.DWISInstance instance)
    {

        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();

        stringBuilder.Append("flowchart LR\n");// +
        stringBuilder.AppendLine("\t classDef typeClass fill:#f96;");
        stringBuilder.AppendLine("\t classDef classClass fill:#9dd0ff;");
        stringBuilder.AppendLine("\t classDef attributeClass fill:#1e9c95");

        var types = instance.Population.Select(i => i.TypeName).Distinct();
        var classes = instance.ClassAssertions.Select(i => i.Class).Distinct();

        foreach (var t in types)
        {
            stringBuilder.AppendLine($"{t}[[{t}]]:::typeClass");
        }

        foreach (var c in classes)
        {
            stringBuilder.AppendLine($"{c}[[{c}]]:::classClass");
        }

        foreach (var n in instance.Population)
        {
            // stringBuilder.AppendLine($"{n.Name} -- is a --o {n.TypeName}");
            stringBuilder.AppendLine($"{n.Name} --o {n.TypeName}");
            if (n.Attributes != null)
            {
                foreach (var att in n.Attributes)
                {
                    if (!string.IsNullOrEmpty(att.AttributeValue))
                    {
                        stringBuilder.AppendLine($"{n.Name} -- {att.AttributeName} --x {n.Name + att.AttributeName}([{att.AttributeValue}]):::attributeClass");
                    }
                }
            }
        }

        foreach (var n in instance.ClassAssertions)
        {
            stringBuilder.AppendLine($"{n.Subject} --o {n.Class}");
        }

        foreach (var s in instance.Sentences)
        {
            stringBuilder.AppendLine($"{s.Subject} -- {s.Verb} --> {s.Object}");
        }
        return stringBuilder.ToString();
    }

}
