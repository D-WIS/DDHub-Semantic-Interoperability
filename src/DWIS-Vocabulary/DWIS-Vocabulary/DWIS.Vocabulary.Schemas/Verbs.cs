using System;
namespace DWIS.Vocabulary.Schemas
{
public static class Verbs
{
public enum Enum
{
IsEnablingSignalFor = -1231712099,
IsActivatedSignalFor = -1330345345,
AllowEnablementSignalFor = -817058098,
IsIdlingSignalFor = 843286550,
IsUserControllableExtraMarginSignalFor = -1477926185,
IsUsedExtraMarginSignalFor = 661004314,
IsArmedSignalFor = -1874633574,
IsAlertTriggeredSignalFor = 1805824169,
IsAlarmTriggeredSignalFor = 808565722,
IsInSafeModeSignalFor = -525862670,
IsImpactDescriptionSignalFor = 412900967,
IsFeatureSignalFor = -255891196,
IsRecommendedBy = -1269676851,
IsRecommendedFor = -987125123,
HasControlLimit = 1223877537,
IsCharacterizedBy = 1271693921,
HasOperationalStep = 1894084991,
IsAnActionOf = 310805781,
IsATaskOf = 2101758350,
IsAContextOf = 1149786451,
IsDependentOn = 2049818070,
IsObservableFrom = -1710422697,
HasPressureReference = -1384871958,
HasTemperatureReference = -1742951743,
HasElevationReference = -652341209,
Controls = 1215944151,
HasFunction = -646754758,
IsCommandFor = -589944628,
IsComputationInput = -1873233625,
IsLimitFor = 1525399547,
IsMinimumLimitFor = -325624047,
IsMaximumLimitFor = -699706614,
IsCurrentStateFor = 1142662522,
IsInformationForCurrentStateOf = 220800712,
IsInSafeModeStateFor = -1407730426,
IsSetPointFor = -938092920,
IsSetPointRecommendationFor = 349828736,
IsSetPointAdviceFor = -1946117027,
IsSetPointMinimumRecommendationFor = 551876586,
IsSetPointMinimumAdviceFor = -1108044271,
IsSetPointMaximumRecommendationFor = -298183470,
IsSetPointMaximumAdviceFor = 1444668000,
IsTransformationInput = -1962069853,
IsBufferingInput = 2042044396,
IsDerivationInput = 1917480248,
IsResamplingInput = -248002039,
IsTransmissionInput = 1856951971,
IsGeneratedBy = -1035485063,
IsComputedBy = -1410719327,
IsMeasuredBy = 638982596,
IsRecordedFrom = 2141882619,
IsTransformationOutput = -218263925,
IsBufferingOutput = -1735782870,
IsDerivedFrom = 176402051,
IsIntegratedFrom = -1830843214,
IsResampledBy = 991286758,
IsTransmissionOutput = 254822767,
IsProcessedBy = 644227406,
IsProvidedBy = 1581242873,
IsProvidedTo = 1279884714,
IsTransmittedBy = -951122524,
IsConditionedBy = 1783105839,
IsConditionInput = 1855088516,
IsConditionLeft = 1034434324,
IsConditionRight = 553266544,
IsValidBy = -750183505,
HasDomain = 1574551047,
HasTimeIntervalDomain = -1985992810,
HasValue = -439628378,
HasDynamicValue = -2097593852,
HasStaticValue = 1963180602,
IsToBeComparedWith = -1218486187,
IsToBeGreaterThan = -1973781946,
IsToBeGreaterOrEqualThan = -1694796845,
IsToBeStrictlyGreaterThan = -211513904,
IsToBeSmallerThan = -1482191380,
IsToBeSmallerOrEqualThan = 570834350,
IsToBeStrictlySmallerThan = -1314367982,
IsToBeEqualTo = -199538112,
IsToBeDifferentFrom = 1828921893,
IsSubPartOf = 1658630499,
AccountsFor = -389935383,
IsRelatedToDrillingIncident = 1012038441,
ManagesIncident = -329318671,
IsRelatedToDrillingLimit = 754893845,
ImplementsLimit = -2105792650,
IsRelatedToDrillingObjective = -1664792006,
ImplementsObjective = -1361725442,
IsRelatedToDrillingProcedure = 1815049606,
ImplementsProcedure = -1891402794,
DWISVerb = 1510430475,
BelongsToClass = 273354808,
HasEndPoint = -365306553,
HasPressureReferenceType = 1543598808,
EndsHydraulicBranchDecomposition = 1129488394,
IsAHydraulicRepresentationFor = -1561236973,
HasBranchComponent = 1263877882,
HasBranchCoordinateSystem = -626008714,
HasHydraulicState = 1995471986,
HasHydraulicStateValueFrom = -459661544,
HasLeftBranchCoordinates = -1940459445,
HasRightBranchCoordinates = 44712833,
IsHydraulicallyLocatedAt = 1131802501,
IsEquivalentCirculationDensityAt = -1272384389,
IsFluidDensityAt = 1854449816,
IsFluidTemperatureAt = 1538606152,
IsFluidVelocityAt = 2069256660,
IsOpeningRatioAt = 852851124,
IsVolumeAt = 1354051677,
IsHydraulicEstimationAt = -2087355670,
IsHydraulicMaximumAllowedRateOfChangeAt = -860442114,
IsHydraulicMaximumAllowedValueAt = -325054155,
IsHydraulicMeasurementAt = 1614079764,
IsMassFlowRateAt = -1956681755,
IsPressureAt = 123941708,
IsPressureGradientAt = -1241261829,
IsVolumetricFlowRateAt = -687672762,
IsHydraulicConnectedTo = -1058137212,
HasEndJunction = -792155795,
HasLeftBranch = 1018140822,
HasRightBranch = 358938407,
HasStartJunction = -1072130292,
StartsHydraulicBranchDecomposition = 78194707,
ConcernsAFluidComponent = 53332305,
IsUpstreamOf = -2031245200,
IsDownstreamOf = -88400409,
IsOfMechanicalStiffnessType = 653155953,
IsAMechanicalRepresentationFor = -1996684854,
HasMechanicalState = 869440538,
HasMechanicalStateValueFrom = -800547232,
IsMechanicallyConnectedTo = 1072902480,
IsMechanicallyLocatedAt = -42807411,
IsForMotionType = -1669742916,
HasMotionType = 889116384,
HasCoordinates = 1364883674,
HasReferenceFrame = 1070507238,
HasReferenceFrameOrigin = 1767837940,
IsPhysicallyLocatedAt = -122386201,
AssociatesMeasurableQuantity = -1732142697,
AssociatesUnit = -1410272158,
HasUnitAssociation = -1952679085,
HasMeasurableQuantity = 1649275161,
IsOfBaseQuantity = 635167880,
IsOfMeasurableQuantity = -1089831957,
IsUnitForQuantity = -659986901,
HasSIUnit = 768998612,
HasUnitOfMeasure = -1639376972,
BelongsToSynchronizationGroup = -1593896520,
HasAcquisitionClock = -183934295,
HasSourceClock = -1774846454,
HasSourceTime = -2101550209,
HasAcquisitionTime = -750766441,
HasTransmissionDelay = -609926890,
IsSynchronizationGroupInput = 35257785,
IsSynchronizationGroupOutput = -869452671,
HasTimeReference = 1440399189,
HasUncertainty = -1278990216,
HasUncertaintyAccuracy = 1938342136,
HasUncertaintyPrecision = 139188655,
HasUncertaintyMin = 325337500,
HasUncertaintyMax = -1786110429,
HasUncertaintyMean = -70064574,
HasUncertaintyStandardDeviation = 2046791664,
HasProportionError = 868584010,
HasFullScale = -1795646821,
HasUncertaintyHistogram = -119792944
}
	public const string IsEnablingSignalFor = "IsEnablingSignalFor";
	public const string IsActivatedSignalFor = "IsActivatedSignalFor";
	public const string AllowEnablementSignalFor = "AllowEnablementSignalFor";
	public const string IsIdlingSignalFor = "IsIdlingSignalFor";
	public const string IsUserControllableExtraMarginSignalFor = "IsUserControllableExtraMarginSignalFor";
	public const string IsUsedExtraMarginSignalFor = "IsUsedExtraMarginSignalFor";
	public const string IsArmedSignalFor = "IsArmedSignalFor";
	public const string IsAlertTriggeredSignalFor = "IsAlertTriggeredSignalFor";
	public const string IsAlarmTriggeredSignalFor = "IsAlarmTriggeredSignalFor";
	public const string IsInSafeModeSignalFor = "IsInSafeModeSignalFor";
	public const string IsImpactDescriptionSignalFor = "IsImpactDescriptionSignalFor";
	public const string IsFeatureSignalFor = "IsFeatureSignalFor";
	public const string IsRecommendedBy = "IsRecommendedBy";
	public const string IsRecommendedFor = "IsRecommendedFor";
	public const string HasControlLimit = "HasControlLimit";
	public const string IsCharacterizedBy = "IsCharacterizedBy";
	public const string HasOperationalStep = "HasOperationalStep";
	public const string IsAnActionOf = "IsAnActionOf";
	public const string IsATaskOf = "IsATaskOf";
	public const string IsAContextOf = "IsAContextOf";
	public const string IsDependentOn = "IsDependentOn";
	public const string IsObservableFrom = "IsObservableFrom";
	public const string HasPressureReference = "HasPressureReference";
	public const string HasTemperatureReference = "HasTemperatureReference";
	public const string HasElevationReference = "HasElevationReference";
	public const string Controls = "Controls";
	public const string HasFunction = "HasFunction";
	public const string IsCommandFor = "IsCommandFor";
	public const string IsComputationInput = "IsComputationInput";
	public const string IsLimitFor = "IsLimitFor";
	public const string IsMinimumLimitFor = "IsMinimumLimitFor";
	public const string IsMaximumLimitFor = "IsMaximumLimitFor";
	public const string IsCurrentStateFor = "IsCurrentStateFor";
	public const string IsInformationForCurrentStateOf = "IsInformationForCurrentStateOf";
	public const string IsInSafeModeStateFor = "IsInSafeModeStateFor";
	public const string IsSetPointFor = "IsSetPointFor";
	public const string IsSetPointRecommendationFor = "IsSetPointRecommendationFor";
	public const string IsSetPointAdviceFor = "IsSetPointAdviceFor";
	public const string IsSetPointMinimumRecommendationFor = "IsSetPointMinimumRecommendationFor";
	public const string IsSetPointMinimumAdviceFor = "IsSetPointMinimumAdviceFor";
	public const string IsSetPointMaximumRecommendationFor = "IsSetPointMaximumRecommendationFor";
	public const string IsSetPointMaximumAdviceFor = "IsSetPointMaximumAdviceFor";
	public const string IsTransformationInput = "IsTransformationInput";
	public const string IsBufferingInput = "IsBufferingInput";
	public const string IsDerivationInput = "IsDerivationInput";
	public const string IsResamplingInput = "IsResamplingInput";
	public const string IsTransmissionInput = "IsTransmissionInput";
	public const string IsGeneratedBy = "IsGeneratedBy";
	public const string IsComputedBy = "IsComputedBy";
	public const string IsMeasuredBy = "IsMeasuredBy";
	public const string IsRecordedFrom = "IsRecordedFrom";
	public const string IsTransformationOutput = "IsTransformationOutput";
	public const string IsBufferingOutput = "IsBufferingOutput";
	public const string IsDerivedFrom = "IsDerivedFrom";
	public const string IsIntegratedFrom = "IsIntegratedFrom";
	public const string IsResampledBy = "IsResampledBy";
	public const string IsTransmissionOutput = "IsTransmissionOutput";
	public const string IsProcessedBy = "IsProcessedBy";
	public const string IsProvidedBy = "IsProvidedBy";
	public const string IsProvidedTo = "IsProvidedTo";
	public const string IsTransmittedBy = "IsTransmittedBy";
	public const string IsConditionedBy = "IsConditionedBy";
	public const string IsConditionInput = "IsConditionInput";
	public const string IsConditionLeft = "IsConditionLeft";
	public const string IsConditionRight = "IsConditionRight";
	public const string IsValidBy = "IsValidBy";
	public const string HasDomain = "HasDomain";
	public const string HasTimeIntervalDomain = "HasTimeIntervalDomain";
	public const string HasValue = "HasValue";
	public const string HasDynamicValue = "HasDynamicValue";
	public const string HasStaticValue = "HasStaticValue";
	public const string IsToBeComparedWith = "IsToBeComparedWith";
	public const string IsToBeGreaterThan = "IsToBeGreaterThan";
	public const string IsToBeGreaterOrEqualThan = "IsToBeGreaterOrEqualThan";
	public const string IsToBeStrictlyGreaterThan = "IsToBeStrictlyGreaterThan";
	public const string IsToBeSmallerThan = "IsToBeSmallerThan";
	public const string IsToBeSmallerOrEqualThan = "IsToBeSmallerOrEqualThan";
	public const string IsToBeStrictlySmallerThan = "IsToBeStrictlySmallerThan";
	public const string IsToBeEqualTo = "IsToBeEqualTo";
	public const string IsToBeDifferentFrom = "IsToBeDifferentFrom";
	public const string IsSubPartOf = "IsSubPartOf";
	public const string AccountsFor = "AccountsFor";
	public const string IsRelatedToDrillingIncident = "IsRelatedToDrillingIncident";
	public const string ManagesIncident = "ManagesIncident";
	public const string IsRelatedToDrillingLimit = "IsRelatedToDrillingLimit";
	public const string ImplementsLimit = "ImplementsLimit";
	public const string IsRelatedToDrillingObjective = "IsRelatedToDrillingObjective";
	public const string ImplementsObjective = "ImplementsObjective";
	public const string IsRelatedToDrillingProcedure = "IsRelatedToDrillingProcedure";
	public const string ImplementsProcedure = "ImplementsProcedure";
	public const string DWISVerb = "DWISVerb";
	public const string BelongsToClass = "BelongsToClass";
	public const string HasEndPoint = "HasEndPoint";
	public const string HasPressureReferenceType = "HasPressureReferenceType";
	public const string EndsHydraulicBranchDecomposition = "EndsHydraulicBranchDecomposition";
	public const string IsAHydraulicRepresentationFor = "IsAHydraulicRepresentationFor";
	public const string HasBranchComponent = "HasBranchComponent";
	public const string HasBranchCoordinateSystem = "HasBranchCoordinateSystem";
	public const string HasHydraulicState = "HasHydraulicState";
	public const string HasHydraulicStateValueFrom = "HasHydraulicStateValueFrom";
	public const string HasLeftBranchCoordinates = "HasLeftBranchCoordinates";
	public const string HasRightBranchCoordinates = "HasRightBranchCoordinates";
	public const string IsHydraulicallyLocatedAt = "IsHydraulicallyLocatedAt";
	public const string IsEquivalentCirculationDensityAt = "IsEquivalentCirculationDensityAt";
	public const string IsFluidDensityAt = "IsFluidDensityAt";
	public const string IsFluidTemperatureAt = "IsFluidTemperatureAt";
	public const string IsFluidVelocityAt = "IsFluidVelocityAt";
	public const string IsOpeningRatioAt = "IsOpeningRatioAt";
	public const string IsVolumeAt = "IsVolumeAt";
	public const string IsHydraulicEstimationAt = "IsHydraulicEstimationAt";
	public const string IsHydraulicMaximumAllowedRateOfChangeAt = "IsHydraulicMaximumAllowedRateOfChangeAt";
	public const string IsHydraulicMaximumAllowedValueAt = "IsHydraulicMaximumAllowedValueAt";
	public const string IsHydraulicMeasurementAt = "IsHydraulicMeasurementAt";
	public const string IsMassFlowRateAt = "IsMassFlowRateAt";
	public const string IsPressureAt = "IsPressureAt";
	public const string IsPressureGradientAt = "IsPressureGradientAt";
	public const string IsVolumetricFlowRateAt = "IsVolumetricFlowRateAt";
	public const string IsHydraulicConnectedTo = "IsHydraulicConnectedTo";
	public const string HasEndJunction = "HasEndJunction";
	public const string HasLeftBranch = "HasLeftBranch";
	public const string HasRightBranch = "HasRightBranch";
	public const string HasStartJunction = "HasStartJunction";
	public const string StartsHydraulicBranchDecomposition = "StartsHydraulicBranchDecomposition";
	public const string ConcernsAFluidComponent = "ConcernsAFluidComponent";
	public const string IsUpstreamOf = "IsUpstreamOf";
	public const string IsDownstreamOf = "IsDownstreamOf";
	public const string IsOfMechanicalStiffnessType = "IsOfMechanicalStiffnessType";
	public const string IsAMechanicalRepresentationFor = "IsAMechanicalRepresentationFor";
	public const string HasMechanicalState = "HasMechanicalState";
	public const string HasMechanicalStateValueFrom = "HasMechanicalStateValueFrom";
	public const string IsMechanicallyConnectedTo = "IsMechanicallyConnectedTo";
	public const string IsMechanicallyLocatedAt = "IsMechanicallyLocatedAt";
	public const string IsForMotionType = "IsForMotionType";
	public const string HasMotionType = "HasMotionType";
	public const string HasCoordinates = "HasCoordinates";
	public const string HasReferenceFrame = "HasReferenceFrame";
	public const string HasReferenceFrameOrigin = "HasReferenceFrameOrigin";
	public const string IsPhysicallyLocatedAt = "IsPhysicallyLocatedAt";
	public const string AssociatesMeasurableQuantity = "AssociatesMeasurableQuantity";
	public const string AssociatesUnit = "AssociatesUnit";
	public const string HasUnitAssociation = "HasUnitAssociation";
	public const string HasMeasurableQuantity = "HasMeasurableQuantity";
	public const string IsOfBaseQuantity = "IsOfBaseQuantity";
	public const string IsOfMeasurableQuantity = "IsOfMeasurableQuantity";
	public const string IsUnitForQuantity = "IsUnitForQuantity";
	public const string HasSIUnit = "HasSIUnit";
	public const string HasUnitOfMeasure = "HasUnitOfMeasure";
	public const string BelongsToSynchronizationGroup = "BelongsToSynchronizationGroup";
	public const string HasAcquisitionClock = "HasAcquisitionClock";
	public const string HasSourceClock = "HasSourceClock";
	public const string HasSourceTime = "HasSourceTime";
	public const string HasAcquisitionTime = "HasAcquisitionTime";
	public const string HasTransmissionDelay = "HasTransmissionDelay";
	public const string IsSynchronizationGroupInput = "IsSynchronizationGroupInput";
	public const string IsSynchronizationGroupOutput = "IsSynchronizationGroupOutput";
	public const string HasTimeReference = "HasTimeReference";
	public const string HasUncertainty = "HasUncertainty";
	public const string HasUncertaintyAccuracy = "HasUncertaintyAccuracy";
	public const string HasUncertaintyPrecision = "HasUncertaintyPrecision";
	public const string HasUncertaintyMin = "HasUncertaintyMin";
	public const string HasUncertaintyMax = "HasUncertaintyMax";
	public const string HasUncertaintyMean = "HasUncertaintyMean";
	public const string HasUncertaintyStandardDeviation = "HasUncertaintyStandardDeviation";
	public const string HasProportionError = "HasProportionError";
	public const string HasFullScale = "HasFullScale";
	public const string HasUncertaintyHistogram = "HasUncertaintyHistogram";
}
}
