using System;
namespace DWIS.Vocabulary.Schemas
{
public static class Verbs
{
public enum Enum
{
IsEnablingSignalFor = -2050188211,
IsActivatedSignalFor = 945174307,
AllowEnablementSignalFor = -237964957,
IsIdlingSignalFor = 23796003,
IsUserControllableExtraMarginSignalFor = -2073336786,
IsUsedExtraMarginSignalFor = -2077899426,
IsArmedSignalFor = -1516644086,
IsAlertTriggeredSignalFor = 1556575794,
IsAlarmTriggeredSignalFor = -1629039034,
IsIdlingAfterTriggeredSignalFor = -508094383,
IsInSafeModeSignalFor = 1653014544,
IsImpactDescriptionSignalFor = 1814933304,
IsFeatureSignalFor = -1215893689,
IsRecommendedBy = -1107131701,
IsRecommendedFor = 590897466,
HasControlLimit = -168191793,
IsCharacterizedBy = 989764640,
HasOperationalStep = -1515112671,
IsAnActionOf = 8293564,
IsATaskOf = -296287149,
IsAContextOf = -331709983,
IsDependentOn = 927242428,
IsObservableFrom = -285175563,
HasPressureReference = -109017704,
HasTemperatureReference = 985278761,
HasElevationReference = -1792478181,
Controls = 139419613,
HasFunction = -938518241,
IsCommandFor = 720124594,
IsComputationInput = -656364834,
IsLimitFor = -720801465,
IsMinimumLimitFor = -438961025,
IsMaximumLimitFor = 806791226,
IsCurrentStateFor = -161515674,
IsInformationForCurrentStateOf = -1136132524,
IsSetPointFor = 1625684813,
IsSetPointRecommendationFor = -11181770,
IsSetPointAdviceFor = 555459158,
IsSetPointMinimumRecommendationFor = -1416901226,
IsSetPointMinimumAdviceFor = 589208650,
IsSetPointMaximumRecommendationFor = -210927598,
IsSetPointMaximumAdviceFor = -571697324,
IsTransformationInput = -1866904681,
IsBufferingInput = -1596774568,
IsDerivationInput = 1391755439,
IsResamplingInput = 456280218,
IsTransmissionInput = -604615356,
IsGeneratedBy = -515406495,
IsComputedBy = -1789728494,
IsMeasuredBy = 1376676214,
IsRecordedFrom = 2052064480,
IsTransformationOutput = -473046990,
IsBufferingOutput = 675279791,
IsDerivedFrom = -984632501,
IsIntegratedFrom = -2130613235,
IsResampledBy = 103695229,
IsTransmissionOutput = 1083847211,
IsProcessedBy = -981563586,
IsProvidedBy = 1911015985,
IsProvidedTo = 1693933103,
IsTransmittedBy = 997338151,
IsConditionedBy = 1836451448,
IsConditionInput = 533791787,
IsConditionLeft = -1473155548,
IsConditionRight = -1531359988,
IsValidBy = 985036379,
HasDomain = -46777983,
HasTimeIntervalDomain = -1376396299,
HasValue = 2109543108,
HasDynamicValue = 1629582211,
HasStaticValue = -279589055,
IsToBeComparedWith = -700528993,
IsToBeGreaterThan = -2105775240,
IsToBeGreaterOrEqualThan = 869140719,
IsToBeStrictlyGreaterThan = -1231162023,
IsToBeSmallerThan = 897242659,
IsToBeSmallerOrEqualThan = -1659341545,
IsToBeStrictlySmallerThan = 149952972,
IsToBeEqualTo = 441530418,
IsToBeDifferentFrom = -258897476,
IsSubPartOf = -778603932,
AccountsFor = 323944098,
IsRelatedToDrillingIncident = 1929727053,
ManagesIncident = 1053017273,
IsRelatedToDrillingLimit = 2002848312,
ImplementsLimit = 879955422,
IsRelatedToDrillingObjective = -1807786213,
ImplementsObjective = -1145248569,
IsRelatedToDrillingProcedure = -518062500,
ImplementsProcedure = 1285957904,
DWISVerb = 1515325723,
BelongsToClass = -89389862,
HasEndPoint = -502678747,
HasPressureReferenceType = -1420438460,
EndsHydraulicBranchDecomposition = -1251984123,
IsAHydraulicRepresentationFor = 2126400097,
HasBranchComponent = -694059241,
HasBranchCoordinateSystem = -119111445,
HasHydraulicState = -1105417653,
HasHydraulicStateValueFrom = 1903277137,
HasLeftBranchCoordinates = 413264382,
HasRightBranchCoordinates = 1040318402,
IsHydraulicallyLocatedAt = 1387355007,
IsEquivalentCirculationDensityAt = -166054257,
IsFluidDensityAt = -1730069691,
IsFluidTemperatureAt = -59865882,
IsFluidVelocityAt = 918388443,
IsOpeningRatioAt = -1418794139,
IsVolumeAt = -1812122848,
IsHydraulicEstimationAt = 421401680,
IsHydraulicMaximumAllowedRateOfChangeAt = -249335547,
IsHydraulicMaximumAllowedValueAt = -824560321,
IsHydraulicMeasurementAt = -804703698,
IsMassFlowRateAt = 1148111105,
IsPressureAt = 1594499623,
IsPressureGradientAt = -307759665,
IsVolumetricFlowRateAt = 437731360,
IsHydraulicConnectedTo = 407992161,
HasEndJunction = -799782812,
HasLeftBranch = 1469639340,
HasRightBranch = -2029612282,
HasStartJunction = 1046597012,
StartsHydraulicBranchDecomposition = -2048331311,
ConcernsAFluidComponent = -1819328197,
IsOfMechanicalStiffnessType = 98409291,
IsAMechanicalRepresentationFor = 1836603894,
HasMechanicalState = 1594257166,
HasMechanicalStateValueFrom = -173564391,
IsMechanicallyConnectedTo = 779273566,
IsMechanicallyLocatedAt = -707368821,
IsForMotionType = -98950578,
HasMotionType = 826575709,
HasCoordinates = 1699159851,
HasReferenceFrame = 1646088775,
HasReferenceFrameOrigin = 1072924270,
IsPhysicallyLocatedAt = -1519983403,
AssociatesMeasurableQuantity = 743175826,
AssociatesUnit = -943807273,
HasUnitAssociation = -2071917711,
HasMeasurableQuantity = 906634777,
IsOfBaseQuantity = -1309569817,
IsOfMeasurableQuantity = 1844509514,
IsUnitForQuantity = -982513003,
HasSIUnit = -171337825,
HasUnitOfMeasure = 1564940090,
BelongsToSynchronizationGroup = -646257605,
HasAcquisitionClock = 1904306605,
HasSourceClock = -1364315504,
HasSourceTime = 173151930,
HasAcquisitionTime = -861931192,
HasTransmissionDelay = -901309774,
IsSynchronizationGroupInput = 1624672161,
IsSynchronizationGroupOutput = 1890901360,
HasTimeReference = 1294690621,
HasUncertainty = -1759328994,
HasUncertaintyAccuracy = -2063042993,
HasUncertaintyPrecision = -1321732411,
HasUncertaintyMin = -1686403010,
HasUncertaintyMax = -30077745,
HasUncertaintyMean = 642494946,
HasUncertaintyStandardDeviation = -673746361,
HasProportionError = 679756497,
HasFullScale = -537098727,
HasUncertaintyHistogram = 1037598616
}
	public const string IsEnablingSignalFor = "IsEnablingSignalFor";
	public const string IsActivatedSignalFor = "IsActivatedSignalFor";
	public const string AllowEnablementSignalFor = "AllowEnablementSignalFor";
	public const string IsIdlingSignalFor = "IsIdlingSignalFor";
	public const string IsUserControllableExtraMarginSignalFor = "IsUserControllableExtraMarginSignalFor";
	public const string IsUsedExtraMarginSignalFor = "IsUsedExtraMarginSignalFor";
	public const string IsArmedSignalFor = "IsArmedSignalFor";
	public const string IsAlertTriggeredSignalFor = "IsAlertTriggeredSignalFor";
	public const string IsAlarmTriggeredSignalFor = "IsAlarmTriggeredSignalFor";
	public const string IsIdlingAfterTriggeredSignalFor = "IsIdlingAfterTriggeredSignalFor";
	public const string IsInSafeModeSignalFor = "IsInSafeModeSignalFor";
	public const string IsImpactDescriptionSignalFor = "IsImpactDescriptionSignalFor";
	public const string IsFeatureSignalFor = "IsFeatureSignalFor";
	public const string IsRecommendedBy = "IsRecommendedBy";
	public const string IsRecommendedFor = "IsRecommendedFor";
	public const string HasControlLimit = "HasControlLimit";
	public const string IsCharacterizedBy = "IsCharacterizedBy";
	public const string HasOperationalStep = "HasOperationalStep";
	public const string IsAnActionOf = "IsAnActionOf";
	public const string IsATaskOf = "IsATaskOf";
	public const string IsAContextOf = "IsAContextOf";
	public const string IsDependentOn = "IsDependentOn";
	public const string IsObservableFrom = "IsObservableFrom";
	public const string HasPressureReference = "HasPressureReference";
	public const string HasTemperatureReference = "HasTemperatureReference";
	public const string HasElevationReference = "HasElevationReference";
	public const string Controls = "Controls";
	public const string HasFunction = "HasFunction";
	public const string IsCommandFor = "IsCommandFor";
	public const string IsComputationInput = "IsComputationInput";
	public const string IsLimitFor = "IsLimitFor";
	public const string IsMinimumLimitFor = "IsMinimumLimitFor";
	public const string IsMaximumLimitFor = "IsMaximumLimitFor";
	public const string IsCurrentStateFor = "IsCurrentStateFor";
	public const string IsInformationForCurrentStateOf = "IsInformationForCurrentStateOf";
	public const string IsSetPointFor = "IsSetPointFor";
	public const string IsSetPointRecommendationFor = "IsSetPointRecommendationFor";
	public const string IsSetPointAdviceFor = "IsSetPointAdviceFor";
	public const string IsSetPointMinimumRecommendationFor = "IsSetPointMinimumRecommendationFor";
	public const string IsSetPointMinimumAdviceFor = "IsSetPointMinimumAdviceFor";
	public const string IsSetPointMaximumRecommendationFor = "IsSetPointMaximumRecommendationFor";
	public const string IsSetPointMaximumAdviceFor = "IsSetPointMaximumAdviceFor";
	public const string IsTransformationInput = "IsTransformationInput";
	public const string IsBufferingInput = "IsBufferingInput";
	public const string IsDerivationInput = "IsDerivationInput";
	public const string IsResamplingInput = "IsResamplingInput";
	public const string IsTransmissionInput = "IsTransmissionInput";
	public const string IsGeneratedBy = "IsGeneratedBy";
	public const string IsComputedBy = "IsComputedBy";
	public const string IsMeasuredBy = "IsMeasuredBy";
	public const string IsRecordedFrom = "IsRecordedFrom";
	public const string IsTransformationOutput = "IsTransformationOutput";
	public const string IsBufferingOutput = "IsBufferingOutput";
	public const string IsDerivedFrom = "IsDerivedFrom";
	public const string IsIntegratedFrom = "IsIntegratedFrom";
	public const string IsResampledBy = "IsResampledBy";
	public const string IsTransmissionOutput = "IsTransmissionOutput";
	public const string IsProcessedBy = "IsProcessedBy";
	public const string IsProvidedBy = "IsProvidedBy";
	public const string IsProvidedTo = "IsProvidedTo";
	public const string IsTransmittedBy = "IsTransmittedBy";
	public const string IsConditionedBy = "IsConditionedBy";
	public const string IsConditionInput = "IsConditionInput";
	public const string IsConditionLeft = "IsConditionLeft";
	public const string IsConditionRight = "IsConditionRight";
	public const string IsValidBy = "IsValidBy";
	public const string HasDomain = "HasDomain";
	public const string HasTimeIntervalDomain = "HasTimeIntervalDomain";
	public const string HasValue = "HasValue";
	public const string HasDynamicValue = "HasDynamicValue";
	public const string HasStaticValue = "HasStaticValue";
	public const string IsToBeComparedWith = "IsToBeComparedWith";
	public const string IsToBeGreaterThan = "IsToBeGreaterThan";
	public const string IsToBeGreaterOrEqualThan = "IsToBeGreaterOrEqualThan";
	public const string IsToBeStrictlyGreaterThan = "IsToBeStrictlyGreaterThan";
	public const string IsToBeSmallerThan = "IsToBeSmallerThan";
	public const string IsToBeSmallerOrEqualThan = "IsToBeSmallerOrEqualThan";
	public const string IsToBeStrictlySmallerThan = "IsToBeStrictlySmallerThan";
	public const string IsToBeEqualTo = "IsToBeEqualTo";
	public const string IsToBeDifferentFrom = "IsToBeDifferentFrom";
	public const string IsSubPartOf = "IsSubPartOf";
	public const string AccountsFor = "AccountsFor";
	public const string IsRelatedToDrillingIncident = "IsRelatedToDrillingIncident";
	public const string ManagesIncident = "ManagesIncident";
	public const string IsRelatedToDrillingLimit = "IsRelatedToDrillingLimit";
	public const string ImplementsLimit = "ImplementsLimit";
	public const string IsRelatedToDrillingObjective = "IsRelatedToDrillingObjective";
	public const string ImplementsObjective = "ImplementsObjective";
	public const string IsRelatedToDrillingProcedure = "IsRelatedToDrillingProcedure";
	public const string ImplementsProcedure = "ImplementsProcedure";
	public const string DWISVerb = "DWISVerb";
	public const string BelongsToClass = "BelongsToClass";
	public const string HasEndPoint = "HasEndPoint";
	public const string HasPressureReferenceType = "HasPressureReferenceType";
	public const string EndsHydraulicBranchDecomposition = "EndsHydraulicBranchDecomposition";
	public const string IsAHydraulicRepresentationFor = "IsAHydraulicRepresentationFor";
	public const string HasBranchComponent = "HasBranchComponent";
	public const string HasBranchCoordinateSystem = "HasBranchCoordinateSystem";
	public const string HasHydraulicState = "HasHydraulicState";
	public const string HasHydraulicStateValueFrom = "HasHydraulicStateValueFrom";
	public const string HasLeftBranchCoordinates = "HasLeftBranchCoordinates";
	public const string HasRightBranchCoordinates = "HasRightBranchCoordinates";
	public const string IsHydraulicallyLocatedAt = "IsHydraulicallyLocatedAt";
	public const string IsEquivalentCirculationDensityAt = "IsEquivalentCirculationDensityAt";
	public const string IsFluidDensityAt = "IsFluidDensityAt";
	public const string IsFluidTemperatureAt = "IsFluidTemperatureAt";
	public const string IsFluidVelocityAt = "IsFluidVelocityAt";
	public const string IsOpeningRatioAt = "IsOpeningRatioAt";
	public const string IsVolumeAt = "IsVolumeAt";
	public const string IsHydraulicEstimationAt = "IsHydraulicEstimationAt";
	public const string IsHydraulicMaximumAllowedRateOfChangeAt = "IsHydraulicMaximumAllowedRateOfChangeAt";
	public const string IsHydraulicMaximumAllowedValueAt = "IsHydraulicMaximumAllowedValueAt";
	public const string IsHydraulicMeasurementAt = "IsHydraulicMeasurementAt";
	public const string IsMassFlowRateAt = "IsMassFlowRateAt";
	public const string IsPressureAt = "IsPressureAt";
	public const string IsPressureGradientAt = "IsPressureGradientAt";
	public const string IsVolumetricFlowRateAt = "IsVolumetricFlowRateAt";
	public const string IsHydraulicConnectedTo = "IsHydraulicConnectedTo";
	public const string HasEndJunction = "HasEndJunction";
	public const string HasLeftBranch = "HasLeftBranch";
	public const string HasRightBranch = "HasRightBranch";
	public const string HasStartJunction = "HasStartJunction";
	public const string StartsHydraulicBranchDecomposition = "StartsHydraulicBranchDecomposition";
	public const string ConcernsAFluidComponent = "ConcernsAFluidComponent";
	public const string IsOfMechanicalStiffnessType = "IsOfMechanicalStiffnessType";
	public const string IsAMechanicalRepresentationFor = "IsAMechanicalRepresentationFor";
	public const string HasMechanicalState = "HasMechanicalState";
	public const string HasMechanicalStateValueFrom = "HasMechanicalStateValueFrom";
	public const string IsMechanicallyConnectedTo = "IsMechanicallyConnectedTo";
	public const string IsMechanicallyLocatedAt = "IsMechanicallyLocatedAt";
	public const string IsForMotionType = "IsForMotionType";
	public const string HasMotionType = "HasMotionType";
	public const string HasCoordinates = "HasCoordinates";
	public const string HasReferenceFrame = "HasReferenceFrame";
	public const string HasReferenceFrameOrigin = "HasReferenceFrameOrigin";
	public const string IsPhysicallyLocatedAt = "IsPhysicallyLocatedAt";
	public const string AssociatesMeasurableQuantity = "AssociatesMeasurableQuantity";
	public const string AssociatesUnit = "AssociatesUnit";
	public const string HasUnitAssociation = "HasUnitAssociation";
	public const string HasMeasurableQuantity = "HasMeasurableQuantity";
	public const string IsOfBaseQuantity = "IsOfBaseQuantity";
	public const string IsOfMeasurableQuantity = "IsOfMeasurableQuantity";
	public const string IsUnitForQuantity = "IsUnitForQuantity";
	public const string HasSIUnit = "HasSIUnit";
	public const string HasUnitOfMeasure = "HasUnitOfMeasure";
	public const string BelongsToSynchronizationGroup = "BelongsToSynchronizationGroup";
	public const string HasAcquisitionClock = "HasAcquisitionClock";
	public const string HasSourceClock = "HasSourceClock";
	public const string HasSourceTime = "HasSourceTime";
	public const string HasAcquisitionTime = "HasAcquisitionTime";
	public const string HasTransmissionDelay = "HasTransmissionDelay";
	public const string IsSynchronizationGroupInput = "IsSynchronizationGroupInput";
	public const string IsSynchronizationGroupOutput = "IsSynchronizationGroupOutput";
	public const string HasTimeReference = "HasTimeReference";
	public const string HasUncertainty = "HasUncertainty";
	public const string HasUncertaintyAccuracy = "HasUncertaintyAccuracy";
	public const string HasUncertaintyPrecision = "HasUncertaintyPrecision";
	public const string HasUncertaintyMin = "HasUncertaintyMin";
	public const string HasUncertaintyMax = "HasUncertaintyMax";
	public const string HasUncertaintyMean = "HasUncertaintyMean";
	public const string HasUncertaintyStandardDeviation = "HasUncertaintyStandardDeviation";
	public const string HasProportionError = "HasProportionError";
	public const string HasFullScale = "HasFullScale";
	public const string HasUncertaintyHistogram = "HasUncertaintyHistogram";
}
}
