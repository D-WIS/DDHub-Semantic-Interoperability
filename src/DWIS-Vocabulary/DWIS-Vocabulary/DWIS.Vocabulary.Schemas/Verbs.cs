using System;
namespace DWIS.Vocabulary.Schemas
{
public static class Verbs
{
public enum Enum
{
IsEnablingSignalFor = 1623896781,
IsActivatedSignalFor = 922224729,
AllowEnablementSignalFor = -327769762,
IsIdlingSignalFor = 1998430466,
IsUserControllableExtraMarginSignalFor = 2079132674,
IsUsedExtraMarginSignalFor = -1277524198,
IsArmedSignalFor = 1898991136,
IsAlertTriggeredSignalFor = -1081015823,
IsAlarmTriggeredSignalFor = 1817047618,
IsInSafeModeSignalFor = -1497559661,
IsImpactDescriptionSignalFor = -1524529120,
IsFeatureSignalFor = -1242136826,
IsRecommendedBy = 1521974441,
IsRecommendedFor = -249417250,
HasControlLimit = -161447353,
IsCharacterizedBy = -759396436,
HasOperationalStep = 1818297179,
IsAnActionOf = 1927977273,
IsATaskOf = -77893083,
IsAContextOf = -1791219850,
IsDependentOn = 2110740392,
IsObservableFrom = 1378876189,
HasPressureReference = -320385258,
HasTemperatureReference = 1076603645,
HasElevationReference = -177363840,
Controls = -1668799438,
HasFunction = 826415132,
IsCommandFor = -1727760605,
IsComputationInput = -310050259,
IsLimitFor = 600869368,
IsMinimumLimitFor = 131241610,
IsMaximumLimitFor = 19220212,
IsCurrentStateFor = 84423790,
IsInformationForCurrentStateOf = 1372149672,
IsInSafeModeStateFor = 510802461,
IsSetPointFor = -632850040,
IsSetPointRecommendationFor = -1325567544,
IsSetPointAdviceFor = -536570321,
IsSetPointMinimumRecommendationFor = -1371955744,
IsSetPointMinimumAdviceFor = 1676456488,
IsSetPointMaximumRecommendationFor = 1306636602,
IsSetPointMaximumAdviceFor = -1193806314,
IsTransformationInput = 1481736974,
IsBufferingInput = -1089578710,
IsDerivationInput = 469540482,
IsResamplingInput = -940452037,
IsTransmissionInput = -850891066,
IsGeneratedBy = 2054284874,
IsComputedBy = 26296177,
IsMeasuredBy = -750606876,
IsRecordedFrom = -1845522253,
IsTransformationOutput = 985719898,
IsBufferingOutput = -1497405181,
IsDerivedFrom = 1501249821,
IsIntegratedFrom = 1466938271,
IsResampledBy = 1794452399,
IsTransmissionOutput = 108602397,
IsProcessedBy = 1949381317,
IsProvidedBy = 703405142,
IsProvidedTo = -1286628273,
IsTransmittedBy = 505983504,
IsConditionedBy = -1021834187,
IsConditionInput = -1618000185,
IsConditionLeft = -1086644032,
IsConditionRight = -815345856,
IsValidBy = 2045781646,
HasDomain = 1805512693,
HasTimeIntervalDomain = 951704155,
HasValue = -1220951219,
HasDynamicValue = 577471182,
HasStaticValue = 2004169874,
IsToBeComparedWith = -1096837402,
IsToBeGreaterThan = 155841235,
IsToBeGreaterOrEqualThan = -346632500,
IsToBeStrictlyGreaterThan = -73422785,
IsToBeSmallerThan = -738399477,
IsToBeSmallerOrEqualThan = -79935695,
IsToBeStrictlySmallerThan = 158134808,
IsToBeEqualTo = 205884235,
IsToBeDifferentFrom = -1474351925,
IsSubPartOf = 1362443099,
AccountsFor = 644421213,
IsRelatedToDrillingIncident = -1098477125,
ManagesIncident = -1884574151,
IsRelatedToDrillingLimit = -832970061,
ImplementsLimit = 566705296,
IsRelatedToDrillingObjective = 71976980,
ImplementsObjective = -1402025760,
IsRelatedToDrillingProcedure = 35418550,
ImplementsProcedure = 101080678,
DWISVerb = 619453033,
BelongsToClass = 1896402609,
HasEndPoint = 1570615743,
HasPressureReferenceType = -1203025939,
EndsHydraulicBranchDecomposition = 194937325,
IsAHydraulicRepresentationFor = 340353889,
HasBranchComponent = -89730197,
HasBranchCoordinateSystem = -1971907677,
HasHydraulicState = -1933368580,
HasHydraulicStateValueFrom = -1657636803,
HasLeftBranchCoordinates = 1857949684,
HasRightBranchCoordinates = 124745988,
IsHydraulicallyLocatedAt = 2073448682,
IsEquivalentCirculationDensityAt = -745315065,
IsFluidDensityAt = -2145901680,
IsFluidTemperatureAt = -380389304,
IsFluidVelocityAt = 1611475453,
IsOpeningRatioAt = -616059773,
IsVolumeAt = 303188170,
IsHydraulicEstimationAt = -68659921,
IsHydraulicMaximumAllowedRateOfChangeAt = -960445311,
IsHydraulicMaximumAllowedValueAt = 1631374804,
IsHydraulicMeasurementAt = 1877190696,
IsMassFlowRateAt = -843599985,
IsPressureAt = -1195478220,
IsPressureGradientAt = -319271730,
IsVolumetricFlowRateAt = -1347240454,
IsHydraulicConnectedTo = -456584592,
HasEndJunction = 1395155304,
HasLeftBranch = 1300069436,
HasRightBranch = -2122101781,
HasStartJunction = 372456303,
StartsHydraulicBranchDecomposition = -1225587393,
ConcernsAFluidComponent = -430682921,
IsOfMechanicalStiffnessType = -686180550,
IsAMechanicalRepresentationFor = 282042952,
HasMechanicalState = -631580212,
HasMechanicalStateValueFrom = 2054024145,
IsMechanicallyConnectedTo = 1219495953,
IsMechanicallyLocatedAt = -1550208172,
IsForMotionType = -324942449,
HasMotionType = -1231554261,
HasCoordinates = 1317920140,
HasReferenceFrame = 388064277,
HasReferenceFrameOrigin = 762162017,
IsPhysicallyLocatedAt = 523755719,
AssociatesMeasurableQuantity = 400120441,
AssociatesUnit = -645916922,
HasUnitAssociation = -472348881,
HasMeasurableQuantity = -990561343,
IsOfBaseQuantity = -1071749560,
IsOfMeasurableQuantity = -288351825,
IsUnitForQuantity = -825974978,
HasSIUnit = 1047282621,
HasUnitOfMeasure = -671532682,
BelongsToSynchronizationGroup = -1382384393,
HasAcquisitionClock = -91492884,
HasSourceClock = -357499084,
HasSourceTime = -2095478692,
HasAcquisitionTime = -1777061004,
HasTransmissionDelay = -2023798770,
IsSynchronizationGroupInput = -994897295,
IsSynchronizationGroupOutput = -915142157,
HasTimeReference = -406949970,
HasUncertainty = 2033848477,
HasUncertaintyAccuracy = -1980049988,
HasUncertaintyPrecision = -376958062,
HasUncertaintyMin = -984867003,
HasUncertaintyMax = -1603269767,
HasUncertaintyMean = 642679804,
HasUncertaintyStandardDeviation = 709751080,
HasProportionError = -2050857826,
HasFullScale = -1233190010,
HasUncertaintyHistogram = -1809725895
}
	public const string IsEnablingSignalFor = "IsEnablingSignalFor";
	public const string IsActivatedSignalFor = "IsActivatedSignalFor";
	public const string AllowEnablementSignalFor = "AllowEnablementSignalFor";
	public const string IsIdlingSignalFor = "IsIdlingSignalFor";
	public const string IsUserControllableExtraMarginSignalFor = "IsUserControllableExtraMarginSignalFor";
	public const string IsUsedExtraMarginSignalFor = "IsUsedExtraMarginSignalFor";
	public const string IsArmedSignalFor = "IsArmedSignalFor";
	public const string IsAlertTriggeredSignalFor = "IsAlertTriggeredSignalFor";
	public const string IsAlarmTriggeredSignalFor = "IsAlarmTriggeredSignalFor";
	public const string IsInSafeModeSignalFor = "IsInSafeModeSignalFor";
	public const string IsImpactDescriptionSignalFor = "IsImpactDescriptionSignalFor";
	public const string IsFeatureSignalFor = "IsFeatureSignalFor";
	public const string IsRecommendedBy = "IsRecommendedBy";
	public const string IsRecommendedFor = "IsRecommendedFor";
	public const string HasControlLimit = "HasControlLimit";
	public const string IsCharacterizedBy = "IsCharacterizedBy";
	public const string HasOperationalStep = "HasOperationalStep";
	public const string IsAnActionOf = "IsAnActionOf";
	public const string IsATaskOf = "IsATaskOf";
	public const string IsAContextOf = "IsAContextOf";
	public const string IsDependentOn = "IsDependentOn";
	public const string IsObservableFrom = "IsObservableFrom";
	public const string HasPressureReference = "HasPressureReference";
	public const string HasTemperatureReference = "HasTemperatureReference";
	public const string HasElevationReference = "HasElevationReference";
	public const string Controls = "Controls";
	public const string HasFunction = "HasFunction";
	public const string IsCommandFor = "IsCommandFor";
	public const string IsComputationInput = "IsComputationInput";
	public const string IsLimitFor = "IsLimitFor";
	public const string IsMinimumLimitFor = "IsMinimumLimitFor";
	public const string IsMaximumLimitFor = "IsMaximumLimitFor";
	public const string IsCurrentStateFor = "IsCurrentStateFor";
	public const string IsInformationForCurrentStateOf = "IsInformationForCurrentStateOf";
	public const string IsInSafeModeStateFor = "IsInSafeModeStateFor";
	public const string IsSetPointFor = "IsSetPointFor";
	public const string IsSetPointRecommendationFor = "IsSetPointRecommendationFor";
	public const string IsSetPointAdviceFor = "IsSetPointAdviceFor";
	public const string IsSetPointMinimumRecommendationFor = "IsSetPointMinimumRecommendationFor";
	public const string IsSetPointMinimumAdviceFor = "IsSetPointMinimumAdviceFor";
	public const string IsSetPointMaximumRecommendationFor = "IsSetPointMaximumRecommendationFor";
	public const string IsSetPointMaximumAdviceFor = "IsSetPointMaximumAdviceFor";
	public const string IsTransformationInput = "IsTransformationInput";
	public const string IsBufferingInput = "IsBufferingInput";
	public const string IsDerivationInput = "IsDerivationInput";
	public const string IsResamplingInput = "IsResamplingInput";
	public const string IsTransmissionInput = "IsTransmissionInput";
	public const string IsGeneratedBy = "IsGeneratedBy";
	public const string IsComputedBy = "IsComputedBy";
	public const string IsMeasuredBy = "IsMeasuredBy";
	public const string IsRecordedFrom = "IsRecordedFrom";
	public const string IsTransformationOutput = "IsTransformationOutput";
	public const string IsBufferingOutput = "IsBufferingOutput";
	public const string IsDerivedFrom = "IsDerivedFrom";
	public const string IsIntegratedFrom = "IsIntegratedFrom";
	public const string IsResampledBy = "IsResampledBy";
	public const string IsTransmissionOutput = "IsTransmissionOutput";
	public const string IsProcessedBy = "IsProcessedBy";
	public const string IsProvidedBy = "IsProvidedBy";
	public const string IsProvidedTo = "IsProvidedTo";
	public const string IsTransmittedBy = "IsTransmittedBy";
	public const string IsConditionedBy = "IsConditionedBy";
	public const string IsConditionInput = "IsConditionInput";
	public const string IsConditionLeft = "IsConditionLeft";
	public const string IsConditionRight = "IsConditionRight";
	public const string IsValidBy = "IsValidBy";
	public const string HasDomain = "HasDomain";
	public const string HasTimeIntervalDomain = "HasTimeIntervalDomain";
	public const string HasValue = "HasValue";
	public const string HasDynamicValue = "HasDynamicValue";
	public const string HasStaticValue = "HasStaticValue";
	public const string IsToBeComparedWith = "IsToBeComparedWith";
	public const string IsToBeGreaterThan = "IsToBeGreaterThan";
	public const string IsToBeGreaterOrEqualThan = "IsToBeGreaterOrEqualThan";
	public const string IsToBeStrictlyGreaterThan = "IsToBeStrictlyGreaterThan";
	public const string IsToBeSmallerThan = "IsToBeSmallerThan";
	public const string IsToBeSmallerOrEqualThan = "IsToBeSmallerOrEqualThan";
	public const string IsToBeStrictlySmallerThan = "IsToBeStrictlySmallerThan";
	public const string IsToBeEqualTo = "IsToBeEqualTo";
	public const string IsToBeDifferentFrom = "IsToBeDifferentFrom";
	public const string IsSubPartOf = "IsSubPartOf";
	public const string AccountsFor = "AccountsFor";
	public const string IsRelatedToDrillingIncident = "IsRelatedToDrillingIncident";
	public const string ManagesIncident = "ManagesIncident";
	public const string IsRelatedToDrillingLimit = "IsRelatedToDrillingLimit";
	public const string ImplementsLimit = "ImplementsLimit";
	public const string IsRelatedToDrillingObjective = "IsRelatedToDrillingObjective";
	public const string ImplementsObjective = "ImplementsObjective";
	public const string IsRelatedToDrillingProcedure = "IsRelatedToDrillingProcedure";
	public const string ImplementsProcedure = "ImplementsProcedure";
	public const string DWISVerb = "DWISVerb";
	public const string BelongsToClass = "BelongsToClass";
	public const string HasEndPoint = "HasEndPoint";
	public const string HasPressureReferenceType = "HasPressureReferenceType";
	public const string EndsHydraulicBranchDecomposition = "EndsHydraulicBranchDecomposition";
	public const string IsAHydraulicRepresentationFor = "IsAHydraulicRepresentationFor";
	public const string HasBranchComponent = "HasBranchComponent";
	public const string HasBranchCoordinateSystem = "HasBranchCoordinateSystem";
	public const string HasHydraulicState = "HasHydraulicState";
	public const string HasHydraulicStateValueFrom = "HasHydraulicStateValueFrom";
	public const string HasLeftBranchCoordinates = "HasLeftBranchCoordinates";
	public const string HasRightBranchCoordinates = "HasRightBranchCoordinates";
	public const string IsHydraulicallyLocatedAt = "IsHydraulicallyLocatedAt";
	public const string IsEquivalentCirculationDensityAt = "IsEquivalentCirculationDensityAt";
	public const string IsFluidDensityAt = "IsFluidDensityAt";
	public const string IsFluidTemperatureAt = "IsFluidTemperatureAt";
	public const string IsFluidVelocityAt = "IsFluidVelocityAt";
	public const string IsOpeningRatioAt = "IsOpeningRatioAt";
	public const string IsVolumeAt = "IsVolumeAt";
	public const string IsHydraulicEstimationAt = "IsHydraulicEstimationAt";
	public const string IsHydraulicMaximumAllowedRateOfChangeAt = "IsHydraulicMaximumAllowedRateOfChangeAt";
	public const string IsHydraulicMaximumAllowedValueAt = "IsHydraulicMaximumAllowedValueAt";
	public const string IsHydraulicMeasurementAt = "IsHydraulicMeasurementAt";
	public const string IsMassFlowRateAt = "IsMassFlowRateAt";
	public const string IsPressureAt = "IsPressureAt";
	public const string IsPressureGradientAt = "IsPressureGradientAt";
	public const string IsVolumetricFlowRateAt = "IsVolumetricFlowRateAt";
	public const string IsHydraulicConnectedTo = "IsHydraulicConnectedTo";
	public const string HasEndJunction = "HasEndJunction";
	public const string HasLeftBranch = "HasLeftBranch";
	public const string HasRightBranch = "HasRightBranch";
	public const string HasStartJunction = "HasStartJunction";
	public const string StartsHydraulicBranchDecomposition = "StartsHydraulicBranchDecomposition";
	public const string ConcernsAFluidComponent = "ConcernsAFluidComponent";
	public const string IsOfMechanicalStiffnessType = "IsOfMechanicalStiffnessType";
	public const string IsAMechanicalRepresentationFor = "IsAMechanicalRepresentationFor";
	public const string HasMechanicalState = "HasMechanicalState";
	public const string HasMechanicalStateValueFrom = "HasMechanicalStateValueFrom";
	public const string IsMechanicallyConnectedTo = "IsMechanicallyConnectedTo";
	public const string IsMechanicallyLocatedAt = "IsMechanicallyLocatedAt";
	public const string IsForMotionType = "IsForMotionType";
	public const string HasMotionType = "HasMotionType";
	public const string HasCoordinates = "HasCoordinates";
	public const string HasReferenceFrame = "HasReferenceFrame";
	public const string HasReferenceFrameOrigin = "HasReferenceFrameOrigin";
	public const string IsPhysicallyLocatedAt = "IsPhysicallyLocatedAt";
	public const string AssociatesMeasurableQuantity = "AssociatesMeasurableQuantity";
	public const string AssociatesUnit = "AssociatesUnit";
	public const string HasUnitAssociation = "HasUnitAssociation";
	public const string HasMeasurableQuantity = "HasMeasurableQuantity";
	public const string IsOfBaseQuantity = "IsOfBaseQuantity";
	public const string IsOfMeasurableQuantity = "IsOfMeasurableQuantity";
	public const string IsUnitForQuantity = "IsUnitForQuantity";
	public const string HasSIUnit = "HasSIUnit";
	public const string HasUnitOfMeasure = "HasUnitOfMeasure";
	public const string BelongsToSynchronizationGroup = "BelongsToSynchronizationGroup";
	public const string HasAcquisitionClock = "HasAcquisitionClock";
	public const string HasSourceClock = "HasSourceClock";
	public const string HasSourceTime = "HasSourceTime";
	public const string HasAcquisitionTime = "HasAcquisitionTime";
	public const string HasTransmissionDelay = "HasTransmissionDelay";
	public const string IsSynchronizationGroupInput = "IsSynchronizationGroupInput";
	public const string IsSynchronizationGroupOutput = "IsSynchronizationGroupOutput";
	public const string HasTimeReference = "HasTimeReference";
	public const string HasUncertainty = "HasUncertainty";
	public const string HasUncertaintyAccuracy = "HasUncertaintyAccuracy";
	public const string HasUncertaintyPrecision = "HasUncertaintyPrecision";
	public const string HasUncertaintyMin = "HasUncertaintyMin";
	public const string HasUncertaintyMax = "HasUncertaintyMax";
	public const string HasUncertaintyMean = "HasUncertaintyMean";
	public const string HasUncertaintyStandardDeviation = "HasUncertaintyStandardDeviation";
	public const string HasProportionError = "HasProportionError";
	public const string HasFullScale = "HasFullScale";
	public const string HasUncertaintyHistogram = "HasUncertaintyHistogram";
}
}
