using System;
namespace DWIS.Vocabulary.Schemas
{
public static class Verbs
{
public enum Enum
{
IsEnablingSignalFor = -244946432,
IsActivatedSignalFor = -1782976133,
AllowEnablementSignalFor = -238061678,
IsIdlingSignalFor = -2125427165,
IsUserControllableExtraMarginSignalFor = -141941927,
IsUsedExtraMarginSignalFor = 1546103845,
IsArmedSignalFor = 520083666,
IsAlertTriggeredSignalFor = -1295473633,
IsAlarmTriggeredSignalFor = 1708619469,
IsInSafeModeSignalFor = -351219454,
IsImpactDescriptionSignalFor = 1158177287,
IsFeatureSignalFor = 725712127,
IsRecommendedBy = 1217180230,
IsRecommendedFor = 1337294520,
HasControlLimit = -1823641151,
IsCharacterizedBy = -762355751,
HasOperationalStep = -1187897636,
IsAnActionOf = -1096982727,
IsATaskOf = -1690178928,
IsAContextOf = 2056809090,
IsDependentOn = 703861713,
IsObservableFrom = -1537430673,
HasPressureReference = -813569074,
HasTemperatureReference = 990587674,
HasElevationReference = 921939177,
Controls = -1961277761,
HasFunction = 1052974647,
IsCommandFor = 2021753938,
IsComputationInput = 1950906844,
IsLimitFor = 1761678756,
IsMinimumLimitFor = -2084716998,
IsMaximumLimitFor = 846198980,
IsCurrentStateFor = 1852058891,
IsInformationForCurrentStateOf = 487695534,
IsInSafeModeStateFor = -683054701,
IsSetPointFor = 265531441,
IsSetPointRecommendationFor = -1428331254,
IsSetPointAdviceFor = 1099638524,
IsSetPointMinimumRecommendationFor = 246657131,
IsSetPointMinimumAdviceFor = 854254485,
IsSetPointMaximumRecommendationFor = -149605945,
IsSetPointMaximumAdviceFor = -442978603,
IsTransformationInput = 1656360604,
IsBufferingInput = 1672969315,
IsDerivationInput = -1184974343,
IsResamplingInput = 1351380959,
IsTransmissionInput = 64355288,
IsGeneratedBy = -909616119,
IsComputedBy = -1837840443,
IsMeasuredBy = 788848716,
IsRecordedFrom = 415068637,
IsTransformationOutput = 1824710109,
IsBufferingOutput = -740487734,
IsDerivedFrom = -385234884,
IsIntegratedFrom = 666295607,
IsResampledBy = 1501995043,
IsTransmissionOutput = 1054040470,
IsProcessedBy = -1650865997,
IsProvidedBy = 1565643928,
IsProvidedTo = 47335353,
IsTransmittedBy = -1723378922,
IsConditionedBy = 56300735,
IsConditionInput = 1593139916,
IsConditionLeft = -390587468,
IsConditionRight = -1678746024,
IsValidBy = -280519249,
HasDomain = 434102589,
HasTimeIntervalDomain = -276204529,
HasValue = -1110991461,
HasDynamicValue = 468514621,
HasStaticValue = -425466639,
IsToBeComparedWith = -519958405,
IsToBeGreaterThan = 1671072283,
IsToBeGreaterOrEqualThan = -2040634074,
IsToBeStrictlyGreaterThan = 1246044309,
IsToBeSmallerThan = -433024479,
IsToBeSmallerOrEqualThan = -470952533,
IsToBeStrictlySmallerThan = 477254879,
IsToBeEqualTo = 806663151,
IsToBeDifferentFrom = -770601466,
IsSubPartOf = 131717696,
AccountsFor = 425392805,
IsRelatedToDrillingIncident = -493422965,
ManagesIncident = -409740925,
IsRelatedToDrillingLimit = -223015814,
ImplementsLimit = 81498741,
IsRelatedToDrillingObjective = 1099249955,
ImplementsObjective = -450388715,
IsRelatedToDrillingProcedure = -190536482,
ImplementsProcedure = -1180304003,
DWISVerb = 1113293833,
BelongsToClass = -25482220,
HasEndPoint = -1607399017,
HasPressureReferenceType = -899083412,
EndsHydraulicBranchDecomposition = -636071384,
IsAHydraulicRepresentationFor = 1472048375,
HasBranchComponent = 1272727002,
HasBranchCoordinateSystem = 1145520403,
HasHydraulicState = -114837171,
HasHydraulicStateValueFrom = -115206368,
HasLeftBranchCoordinates = 1752793760,
HasRightBranchCoordinates = -1495663785,
IsHydraulicallyLocatedAt = 1239798091,
IsEquivalentCirculationDensityAt = 1293771825,
IsFluidDensityAt = -187407950,
IsFluidTemperatureAt = -120541272,
IsFluidVelocityAt = -26541856,
IsOpeningRatioAt = -1650395643,
IsVolumeAt = -254373697,
IsHydraulicEstimationAt = 751724253,
IsHydraulicMaximumAllowedRateOfChangeAt = -1321873179,
IsHydraulicMaximumAllowedValueAt = 73080641,
IsHydraulicMeasurementAt = -1605351096,
IsMassFlowRateAt = -1558930794,
IsPressureAt = 1700053830,
IsPressureGradientAt = -602689510,
IsVolumetricFlowRateAt = -580263297,
IsHydraulicConnectedTo = -1019406966,
HasEndJunction = 849979004,
HasLeftBranch = 1423971184,
HasRightBranch = -1475663949,
HasStartJunction = -1833291140,
StartsHydraulicBranchDecomposition = -1788854329,
ConcernsAFluidComponent = -2083685467,
IsOfMechanicalStiffnessType = -1696476661,
IsAMechanicalRepresentationFor = -1826526171,
HasMechanicalState = -39402880,
HasMechanicalStateValueFrom = 154429078,
IsMechanicallyConnectedTo = -538131166,
IsMechanicallyLocatedAt = -600008485,
IsForMotionType = -2018544092,
HasMotionType = 597524701,
HasCoordinates = 337824663,
HasReferenceFrame = -87016753,
HasReferenceFrameOrigin = 1380560064,
IsPhysicallyLocatedAt = 1207987063,
AssociatesMeasurableQuantity = 2059655899,
AssociatesUnit = 2124498175,
HasUnitAssociation = 948975934,
HasMeasurableQuantity = 762349200,
IsOfBaseQuantity = -80511521,
IsOfMeasurableQuantity = -1685379916,
IsUnitForQuantity = 889153419,
HasSIUnit = -1566654578,
HasUnitOfMeasure = 1419596333,
BelongsToSynchronizationGroup = -136098964,
HasAcquisitionClock = 2030761739,
HasSourceClock = 1645097280,
HasSourceTime = -675880029,
HasAcquisitionTime = -978801557,
HasTransmissionDelay = 936265297,
IsSynchronizationGroupInput = -865840283,
IsSynchronizationGroupOutput = -2064525355,
HasTimeReference = -2086755859,
HasUncertainty = 1355844549,
HasUncertaintyAccuracy = 1837521492,
HasUncertaintyPrecision = -1089526768,
HasUncertaintyMin = 557937212,
HasUncertaintyMax = 456367305,
HasUncertaintyMean = 1931393163,
HasUncertaintyStandardDeviation = 624364564,
HasProportionError = 537163760,
HasFullScale = 1492720719,
HasUncertaintyHistogram = -863615513
}
	public const string IsEnablingSignalFor = "IsEnablingSignalFor";
	public const string IsActivatedSignalFor = "IsActivatedSignalFor";
	public const string AllowEnablementSignalFor = "AllowEnablementSignalFor";
	public const string IsIdlingSignalFor = "IsIdlingSignalFor";
	public const string IsUserControllableExtraMarginSignalFor = "IsUserControllableExtraMarginSignalFor";
	public const string IsUsedExtraMarginSignalFor = "IsUsedExtraMarginSignalFor";
	public const string IsArmedSignalFor = "IsArmedSignalFor";
	public const string IsAlertTriggeredSignalFor = "IsAlertTriggeredSignalFor";
	public const string IsAlarmTriggeredSignalFor = "IsAlarmTriggeredSignalFor";
	public const string IsInSafeModeSignalFor = "IsInSafeModeSignalFor";
	public const string IsImpactDescriptionSignalFor = "IsImpactDescriptionSignalFor";
	public const string IsFeatureSignalFor = "IsFeatureSignalFor";
	public const string IsRecommendedBy = "IsRecommendedBy";
	public const string IsRecommendedFor = "IsRecommendedFor";
	public const string HasControlLimit = "HasControlLimit";
	public const string IsCharacterizedBy = "IsCharacterizedBy";
	public const string HasOperationalStep = "HasOperationalStep";
	public const string IsAnActionOf = "IsAnActionOf";
	public const string IsATaskOf = "IsATaskOf";
	public const string IsAContextOf = "IsAContextOf";
	public const string IsDependentOn = "IsDependentOn";
	public const string IsObservableFrom = "IsObservableFrom";
	public const string HasPressureReference = "HasPressureReference";
	public const string HasTemperatureReference = "HasTemperatureReference";
	public const string HasElevationReference = "HasElevationReference";
	public const string Controls = "Controls";
	public const string HasFunction = "HasFunction";
	public const string IsCommandFor = "IsCommandFor";
	public const string IsComputationInput = "IsComputationInput";
	public const string IsLimitFor = "IsLimitFor";
	public const string IsMinimumLimitFor = "IsMinimumLimitFor";
	public const string IsMaximumLimitFor = "IsMaximumLimitFor";
	public const string IsCurrentStateFor = "IsCurrentStateFor";
	public const string IsInformationForCurrentStateOf = "IsInformationForCurrentStateOf";
	public const string IsInSafeModeStateFor = "IsInSafeModeStateFor";
	public const string IsSetPointFor = "IsSetPointFor";
	public const string IsSetPointRecommendationFor = "IsSetPointRecommendationFor";
	public const string IsSetPointAdviceFor = "IsSetPointAdviceFor";
	public const string IsSetPointMinimumRecommendationFor = "IsSetPointMinimumRecommendationFor";
	public const string IsSetPointMinimumAdviceFor = "IsSetPointMinimumAdviceFor";
	public const string IsSetPointMaximumRecommendationFor = "IsSetPointMaximumRecommendationFor";
	public const string IsSetPointMaximumAdviceFor = "IsSetPointMaximumAdviceFor";
	public const string IsTransformationInput = "IsTransformationInput";
	public const string IsBufferingInput = "IsBufferingInput";
	public const string IsDerivationInput = "IsDerivationInput";
	public const string IsResamplingInput = "IsResamplingInput";
	public const string IsTransmissionInput = "IsTransmissionInput";
	public const string IsGeneratedBy = "IsGeneratedBy";
	public const string IsComputedBy = "IsComputedBy";
	public const string IsMeasuredBy = "IsMeasuredBy";
	public const string IsRecordedFrom = "IsRecordedFrom";
	public const string IsTransformationOutput = "IsTransformationOutput";
	public const string IsBufferingOutput = "IsBufferingOutput";
	public const string IsDerivedFrom = "IsDerivedFrom";
	public const string IsIntegratedFrom = "IsIntegratedFrom";
	public const string IsResampledBy = "IsResampledBy";
	public const string IsTransmissionOutput = "IsTransmissionOutput";
	public const string IsProcessedBy = "IsProcessedBy";
	public const string IsProvidedBy = "IsProvidedBy";
	public const string IsProvidedTo = "IsProvidedTo";
	public const string IsTransmittedBy = "IsTransmittedBy";
	public const string IsConditionedBy = "IsConditionedBy";
	public const string IsConditionInput = "IsConditionInput";
	public const string IsConditionLeft = "IsConditionLeft";
	public const string IsConditionRight = "IsConditionRight";
	public const string IsValidBy = "IsValidBy";
	public const string HasDomain = "HasDomain";
	public const string HasTimeIntervalDomain = "HasTimeIntervalDomain";
	public const string HasValue = "HasValue";
	public const string HasDynamicValue = "HasDynamicValue";
	public const string HasStaticValue = "HasStaticValue";
	public const string IsToBeComparedWith = "IsToBeComparedWith";
	public const string IsToBeGreaterThan = "IsToBeGreaterThan";
	public const string IsToBeGreaterOrEqualThan = "IsToBeGreaterOrEqualThan";
	public const string IsToBeStrictlyGreaterThan = "IsToBeStrictlyGreaterThan";
	public const string IsToBeSmallerThan = "IsToBeSmallerThan";
	public const string IsToBeSmallerOrEqualThan = "IsToBeSmallerOrEqualThan";
	public const string IsToBeStrictlySmallerThan = "IsToBeStrictlySmallerThan";
	public const string IsToBeEqualTo = "IsToBeEqualTo";
	public const string IsToBeDifferentFrom = "IsToBeDifferentFrom";
	public const string IsSubPartOf = "IsSubPartOf";
	public const string AccountsFor = "AccountsFor";
	public const string IsRelatedToDrillingIncident = "IsRelatedToDrillingIncident";
	public const string ManagesIncident = "ManagesIncident";
	public const string IsRelatedToDrillingLimit = "IsRelatedToDrillingLimit";
	public const string ImplementsLimit = "ImplementsLimit";
	public const string IsRelatedToDrillingObjective = "IsRelatedToDrillingObjective";
	public const string ImplementsObjective = "ImplementsObjective";
	public const string IsRelatedToDrillingProcedure = "IsRelatedToDrillingProcedure";
	public const string ImplementsProcedure = "ImplementsProcedure";
	public const string DWISVerb = "DWISVerb";
	public const string BelongsToClass = "BelongsToClass";
	public const string HasEndPoint = "HasEndPoint";
	public const string HasPressureReferenceType = "HasPressureReferenceType";
	public const string EndsHydraulicBranchDecomposition = "EndsHydraulicBranchDecomposition";
	public const string IsAHydraulicRepresentationFor = "IsAHydraulicRepresentationFor";
	public const string HasBranchComponent = "HasBranchComponent";
	public const string HasBranchCoordinateSystem = "HasBranchCoordinateSystem";
	public const string HasHydraulicState = "HasHydraulicState";
	public const string HasHydraulicStateValueFrom = "HasHydraulicStateValueFrom";
	public const string HasLeftBranchCoordinates = "HasLeftBranchCoordinates";
	public const string HasRightBranchCoordinates = "HasRightBranchCoordinates";
	public const string IsHydraulicallyLocatedAt = "IsHydraulicallyLocatedAt";
	public const string IsEquivalentCirculationDensityAt = "IsEquivalentCirculationDensityAt";
	public const string IsFluidDensityAt = "IsFluidDensityAt";
	public const string IsFluidTemperatureAt = "IsFluidTemperatureAt";
	public const string IsFluidVelocityAt = "IsFluidVelocityAt";
	public const string IsOpeningRatioAt = "IsOpeningRatioAt";
	public const string IsVolumeAt = "IsVolumeAt";
	public const string IsHydraulicEstimationAt = "IsHydraulicEstimationAt";
	public const string IsHydraulicMaximumAllowedRateOfChangeAt = "IsHydraulicMaximumAllowedRateOfChangeAt";
	public const string IsHydraulicMaximumAllowedValueAt = "IsHydraulicMaximumAllowedValueAt";
	public const string IsHydraulicMeasurementAt = "IsHydraulicMeasurementAt";
	public const string IsMassFlowRateAt = "IsMassFlowRateAt";
	public const string IsPressureAt = "IsPressureAt";
	public const string IsPressureGradientAt = "IsPressureGradientAt";
	public const string IsVolumetricFlowRateAt = "IsVolumetricFlowRateAt";
	public const string IsHydraulicConnectedTo = "IsHydraulicConnectedTo";
	public const string HasEndJunction = "HasEndJunction";
	public const string HasLeftBranch = "HasLeftBranch";
	public const string HasRightBranch = "HasRightBranch";
	public const string HasStartJunction = "HasStartJunction";
	public const string StartsHydraulicBranchDecomposition = "StartsHydraulicBranchDecomposition";
	public const string ConcernsAFluidComponent = "ConcernsAFluidComponent";
	public const string IsOfMechanicalStiffnessType = "IsOfMechanicalStiffnessType";
	public const string IsAMechanicalRepresentationFor = "IsAMechanicalRepresentationFor";
	public const string HasMechanicalState = "HasMechanicalState";
	public const string HasMechanicalStateValueFrom = "HasMechanicalStateValueFrom";
	public const string IsMechanicallyConnectedTo = "IsMechanicallyConnectedTo";
	public const string IsMechanicallyLocatedAt = "IsMechanicallyLocatedAt";
	public const string IsForMotionType = "IsForMotionType";
	public const string HasMotionType = "HasMotionType";
	public const string HasCoordinates = "HasCoordinates";
	public const string HasReferenceFrame = "HasReferenceFrame";
	public const string HasReferenceFrameOrigin = "HasReferenceFrameOrigin";
	public const string IsPhysicallyLocatedAt = "IsPhysicallyLocatedAt";
	public const string AssociatesMeasurableQuantity = "AssociatesMeasurableQuantity";
	public const string AssociatesUnit = "AssociatesUnit";
	public const string HasUnitAssociation = "HasUnitAssociation";
	public const string HasMeasurableQuantity = "HasMeasurableQuantity";
	public const string IsOfBaseQuantity = "IsOfBaseQuantity";
	public const string IsOfMeasurableQuantity = "IsOfMeasurableQuantity";
	public const string IsUnitForQuantity = "IsUnitForQuantity";
	public const string HasSIUnit = "HasSIUnit";
	public const string HasUnitOfMeasure = "HasUnitOfMeasure";
	public const string BelongsToSynchronizationGroup = "BelongsToSynchronizationGroup";
	public const string HasAcquisitionClock = "HasAcquisitionClock";
	public const string HasSourceClock = "HasSourceClock";
	public const string HasSourceTime = "HasSourceTime";
	public const string HasAcquisitionTime = "HasAcquisitionTime";
	public const string HasTransmissionDelay = "HasTransmissionDelay";
	public const string IsSynchronizationGroupInput = "IsSynchronizationGroupInput";
	public const string IsSynchronizationGroupOutput = "IsSynchronizationGroupOutput";
	public const string HasTimeReference = "HasTimeReference";
	public const string HasUncertainty = "HasUncertainty";
	public const string HasUncertaintyAccuracy = "HasUncertaintyAccuracy";
	public const string HasUncertaintyPrecision = "HasUncertaintyPrecision";
	public const string HasUncertaintyMin = "HasUncertaintyMin";
	public const string HasUncertaintyMax = "HasUncertaintyMax";
	public const string HasUncertaintyMean = "HasUncertaintyMean";
	public const string HasUncertaintyStandardDeviation = "HasUncertaintyStandardDeviation";
	public const string HasProportionError = "HasProportionError";
	public const string HasFullScale = "HasFullScale";
	public const string HasUncertaintyHistogram = "HasUncertaintyHistogram";
}
}
