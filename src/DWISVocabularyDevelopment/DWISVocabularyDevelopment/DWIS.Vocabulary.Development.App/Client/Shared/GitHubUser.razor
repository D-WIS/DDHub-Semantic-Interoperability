@using DWIS.Vocabulary.Development.App.Shared;
@inject IGitHubManager Manager;

<h1>Welcome @_userName</h1>
@if (!Manager.CredentialsOK())
{
    <p>
    Please enter your GitHub API key to connect to the edition services.
    </p>


    <div class="form-floating">
        <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind="_apiKEY" @bind:event="oninput">
        <label for="floatingPassword">API key</label>
        <button @onclick="@ConnectToGitHub" class="btn btn-primary my-3" type="button">
            @if (_connecting)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            else
            {
            <img src="/css/open-iconic/svg/account-login.svg" class="img-fluid  mr-3" height="15" width="15" />
            }
            Connect to GitHub
        </button>
    </div>



@*<input type="password" class="form-control"  @bind="_apiKEY" @bind:event="oninput" />
    <div>
        <button @onclick="@ConnectToGitHub" class="btn btn-primary my-3">
            <img src="/css/open-iconic/svg/account-login.svg" class="img-fluid  mr-3" height="15" width="15" />
            Connect to GitHub
        </button>
    </div>*@
}
else
{
    <div>
    <div class="row mb-3">
        <label class="col-sm-2">User name</label>
        <label class="col-sm-10">@_userName</label>
    </div>
    <div class="row mb-3">
        <label class="col-sm-2">User login</label>
        <label class="col-sm-10">@_userLogin</label>
    </div>
    <div class="row mb-3">
        <label class="col-sm-2">Edition branch</label>
        <label class="col-sm-10">@_defaultBranchName</label>
    </div>
    </div>
}


@if (_warning)
{
    <label class="alert-warning">@_warningText </label>
}

@code {

    private string _apiKEY = "your API key";
    private string _defaultBranchName = "your default branch name";
    private string _userName = "";
    private string _userLogin = "";

    private bool _warning = false;
    private string _warningText="";

    private bool _connecting = false;


    protected override Task OnInitializedAsync()
    {
        ManageStatus();
        return base.OnInitializedAsync();
    }

    private async void ConnectToGitHub()
    {
        if (!_connecting)
        {
            _connecting = true;
            bool ok = await Manager.ManageCredentials(_apiKEY);
            _connecting = false;
            ManageStatus();
        }
    }

    private async void ManageStatus()
    { 
        if (Manager.CredentialsOK())
        {
            _userName = Manager.GetUserName();
            _defaultBranchName = Manager.GetBranchName();
            _userLogin = Manager.GetUserLogin();
            _warning = !await Manager.BranchOK();

            if (_warning)
            {
                _warningText = "There is no branch with the required name. \r\n";
                _warningText += "Please create a branch called " + Manager.GetBranchName() + "\r\n";
                _warningText += "You can do it there: https://github.com/D-WIS/DDHub-Semantic-Interoperability";
            }
        }
        else
        {
            _warning = true;
            _warningText = "Invalid credentials.";
        }
        StateHasChanged();
    }
}
