@inject IJSRuntime JSRuntime
@inject IDiagramManager DiagramManager

@using DWIS.Vocabulary.Development;
@using DWIS.Vocabulary.Development.App.Shared;

<hr />

<p>Type your semantic graph here. Use <code>Tab</code> to insert the first item in the auto-completion box below. </p>
<p>
    The syntax is <code>TypeNoun : name</code> to instantiate a new item, and <code>subject verb object</code> to write sentences.
    The <code>object</code> is an individual, unless the verb <code>BelongsToClass</code> is chosen, in which case the <code>object</code> is a class noun.
</p>

<textarea style="width:600px; height:450px"
          class="text-light bg-dark"
          spellcheck="false"
          tabindex="-1"
          id="codeTextArea"
          @bind="_instanceCode"
          @bind:event="oninput"
          @onkeyup="@onKeyUp"
          @onkeydown="@onKeyDown"
          @onkeydown:preventDefault="@_preventDefault"
          @ref="codeTextArea" />


<div style="width: 600px; height: 450px; position:relative; top:-450px; left:630px; margin-bottom: -450px">
    <div id="diagram" style="width: 100%; height: 872px"></div>
</div>

<textarea style="width:600px; height:500px" readonly="readonly" spellcheck="false" class="text-dark" rows="20" cols="75" id="completionArea" @bind="_autoCompleteCode">@_autoCompleteCode</textarea>


@code {
    [Parameter]
    public EditableUseCase UseCase { get; set; }
    private DWISInstance? DWISInstance { get; set; } = null;
    private string _instanceCode = "";
    private string _autoCompleteCode = "";

    private DWISVocabulary _vocabulary;
    private Tree<Noun> _typesTree;
    private Tree<Noun> _classesTree;
    private Tree<Verb> _verbsTree;

    private ElementReference codeTextArea;
    private bool _preventDefault = false;

    protected override Task OnParametersSetAsync()
    {
        if (UseCase != null)
        {
            DWISInstance = UseCase.EditedInstance;
            _instanceCode = DWIS.Vocabulary.Utils.MDWriting.ToString(DWISInstance, DWIS.Vocabulary.Standard.VocabularyProvider.Vocabulary, false, false).Replace("- ", string.Empty);
        }
        return base.OnParametersSetAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        _vocabulary = DWIS.Vocabulary.Standard.VocabularyProvider.GetDWISVocabulary();
        _vocabulary.ToTrees(out _typesTree, out _verbsTree);
    }

    private async Task onKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            UseCase.Edited = true;           

            if (_instanceCode.Contains('-'))
            {
                _instanceCode = _instanceCode.Replace("-", string.Empty);
            }

            _instanceCode.Trim();

            if (DiagramManager.Manage(_instanceCode,DWISInstance,out string mermaidCode))
            {             

                await JSRuntime.InvokeVoidAsync("renderMermaidDiagram", mermaidCode);
                
                ManageAutoComplete();
            }
        }
        else
        {
            ManageAutoComplete();
        }
    }
    private async Task onKeyDown(KeyboardEventArgs e)
    {
        _preventDefault = false;
        if (e.Code == "Tab")
        {
            _preventDefault = true;
            var lines = _instanceCode.Split("\n");
            var comp = _autoCompleteCode.Split("\n")[0].Trim();

            bool isType = ContainsType(comp, _typesTree);

            string lastLine = lines[lines.Length - 1];
            var els = lastLine.Split(':', ' ', '.');
            string lastElement = els[els.Length - 1];
            _instanceCode += comp.Remove(0, lastElement.Length) + (isType ? " : " : " ");
            ManageAutoComplete();
        }
    }

    private void ManageAutoComplete()
    {
        int modus = 0;//new line types and individuals
        string lastWord = "";
        if (string.IsNullOrEmpty(_instanceCode) || _instanceCode[_instanceCode.Length - 1] == '\n')
        {
            lastWord = "";
            modus = 0;
        }
        else
        {
            int idx = _instanceCode.LastIndexOf('\n');
            string lastLine;
            if (idx == -1)
            {
                lastLine = _instanceCode;
            }
            else
            {
                lastLine = _instanceCode.Substring(idx + 1);
            }
            idx = lastLine.IndexOf(':');
            if (idx != -1)//instanciation line
            {
                modus = 1;//nothing
                if (idx < lastLine.Length - 1)
                {
                    lastWord = lastLine.Substring(idx + 1).Trim();
                }
            }
            else
            {
                if (lastLine.Contains('.'))
                {
                    var els = lastLine.Split('.', StringSplitOptions.RemoveEmptyEntries);
                    if (els != null && els.Length > 0)
                    {
                        var ressource = DWISInstance.Population.FirstOrDefault(i => i.Name == els[0]);
                        if (ressource != null)
                        {
                            lastWord = ressource.Name;
                            modus = 5;
                        }
                    }
                }
                else if (lastLine.Contains(' '))
                {
                    var els = lastLine.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                    if (els.Length == 1 || els.Length == 2)
                    {
                        if (els.Length == 2)
                        {
                            lastWord = els[1].Trim();//verbs
                        }
                        modus = 2;
                    }
                    else if (els.Length == 3)
                    {
                        if (els[1] == "BelongsToClass")
                        {
                            modus = 4;//classes
                        }
                        else
                        {
                            modus = 3;//individuals
                        }
                        lastWord = els[2].Trim();
                    }
                }
                else
                {
                    lastWord = lastLine.Trim();
                    modus = 0;
                }
            }
        }

        Console.WriteLine($"Last word: {lastWord}, modus: {modus}");

        _autoCompleteCode = GetItems(lastWord, modus).Aggregate("", (current, next) => !string.IsNullOrEmpty(current) ? current + "\n" + next : next);


    }

    private bool ContainsType(string type, Tree<Noun> tree)
    {
        if (tree.RootItem.Name == type)
        {
            return true;
        }
        foreach (var c in tree.Children)
        {
            if (ContainsType(type, c)) { return true; }
        }
        return false;
    }
    private void GetStrings(Tree<Noun> match, List<string> strings, string prefix)
    {
        strings.Add(prefix + match.RootItem.Name);
        foreach (var c in match.Children)
        {
            GetStrings(c, strings, "  " + prefix);
        }
    }
    private void GetStrings(Tree<Verb> match, List<string> strings, string prefix)
    {
        strings.Add(prefix + match.RootItem.Name);
        foreach (var c in match.Children)
        {
            GetStrings(c, strings, "  " + prefix);
        }
    }

    private List<string> GetItems(string word, int modus)
    {
        List<string> items = new List<string>();
        if (modus == 0 || modus == 3)
        {
            items.AddRange(DWISInstance.Population.Where(i => i.Name.StartsWith(word)).Select(i => i.Name));
        }
        if (modus == 0)
        {
            List<Tree<Noun>> match = new List<Tree<Noun>>();
            FindMatchingNoun(_typesTree, word, match);
            foreach (var t in match)
            {
                GetStrings(t, items, "");
            }
        }
        else if (modus == 1)
        { }
        else if (modus == 4)
        {
            List<Tree<Noun>> match = new List<Tree<Noun>>();
            FindMatchingNoun( _typesTree, word, match);
            foreach (var t in match)
            {
                GetStrings(t, items, "");
            }
        }
        else if (modus == 2)
        {
            List<Tree<Verb>> match = new List<Tree<Verb>>();
            FindMatchingVerb(_verbsTree, word, match);
            foreach (var t in match)
            {
                GetStrings(t, items, "");
            }
        }
        else if (modus == 5)
        {
            var ressource = DWISInstance.Population.FirstOrDefault(i => i.Name == word);
            if (ressource != null && ressource.Attributes != null)
            {
                items = ressource.Attributes.Select(at => at.AttributeName).ToList();
            }
        }
        return items;
    }

    private void FindMatchingNoun(Tree<Noun> tree, string word, List<Tree<Noun>> match)
    {
        if (tree.RootItem.Name.StartsWith(word))
        {
            match.Add(tree);
        }
        foreach (var t in tree.Children)
        {
            FindMatchingNoun(t, word, match);
        }
    }
    private void FindMatchingVerb(Tree<Verb> tree, string word, List<Tree<Verb>> match)
    {
        if (tree.RootItem.Name.StartsWith(word))
        {
            match.Add(tree);
        }
        foreach (var t in tree.Children)
        {
            FindMatchingVerb(t, word, match);
        }
    }
}
