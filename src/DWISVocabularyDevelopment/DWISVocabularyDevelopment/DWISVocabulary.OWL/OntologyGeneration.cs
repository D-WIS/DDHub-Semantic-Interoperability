using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using DWIS.Vocabulary.Development;
using DWIS.Vocabulary.Utils;
using RDFSharp.Model;
using RDFSharp.Semantics.OWL;

namespace DWIS.Vocabulary.OWL
{
    public static class OntologyGeneration
    {
        public static string DDHubPrefix = "http://ddhub.no/";

        private static RDFResource AttributeCardinalityRestriction = new RDFResource(DDHubPrefix + "DWISAttributeCardinalityRestriction");

        public static RDFOntology GetOntology(DWISVocabulary vocabulary)
        {
            string ontologyName = "DWISVocabulary";

            vocabulary.ToTrees(out Tree<Noun> nounTree, out Tree<Verb> verbTree);

            string versionInfo = "0.1";
            string comment = "This is the ontology generated by the D-WIS WG1: Semantics of Real-time signals. It has been automatically generated from the vocabulary defined at https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development/auto-generated";
            string label = "D-WIS vocabulary";
            string definedBy = "D-WIS WG1: Semantics of Real-time signals";
            string iri = "https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development/auto-generated/dwis.owl";


            RDFNamespaceRegister.AddNamespace(new RDFNamespace("ddhub", DDHubPrefix));

            RDFOntology ontology = new RDFOntology(new RDFResource(DDHubPrefix + ontologyName));

            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, new RDFOntologyLiteral(new RDFPlainLiteral(comment, "En")));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionInfo, new RDFOntologyLiteral(new RDFTypedLiteral(versionInfo, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Label, new RDFOntologyLiteral(new RDFTypedLiteral(label, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.IsDefinedBy, new RDFOntologyLiteral(new RDFTypedLiteral(definedBy, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionIRI, new RDFOntologyLiteral(new RDFTypedLiteral(iri, RDFModelEnums.RDFDatatypes.XSD_ANYURI)));


            AddClass(nounTree, null, ontology);
            AddVerb(verbTree, null, ontology);

            return ontology;
        }

        public static RDFOntology ExportOntology(string fileName,DWISVocabulary vocabulary)
        {
            var ontology = GetOntology(vocabulary);

            WriteOntology(ontology, fileName);

            return ontology;
        }

        public static void WriteOntology(RDFOntology ontology, string fileName, bool includeModel = true)
        {
            RDFSemanticsEnums.RDFOntologyInferenceExportBehavior behavior = includeModel ? RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.ModelAndData : RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.OnlyData;
            ontology.ToRDFGraph(behavior).ToFile(RDFModelEnums.RDFFormats.Turtle, fileName + ".ttl");
            ontology.ToRDFGraph(behavior).ToFile(RDFModelEnums.RDFFormats.NTriples, fileName + ".nt");
            ontology.ToRDFGraph(behavior).ToFile(RDFModelEnums.RDFFormats.RdfXml, fileName + ".xml");
        }
        public static RDFResource GetBaseTypeResource(string type)
        {
            return new RDFResource("http://www.w3.org/2001/XMLSchema#" + type.ToLower());
        }

        private static void AddClass(Tree<Noun> currentTree, RDFOntologyClass parent, RDFOntology ontology)
        {
            var current = new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.Name));
            ontology.Model.ClassModel.AddClass(current);
            ontology.Model.ClassModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, current, new RDFOntologyLiteral(new RDFPlainLiteral(currentTree.RootItem.Description, "En")));

            if (parent != null)
            {
                ontology.Model.ClassModel.AddSubClassOfRelation(current, parent);
            }
            if (currentTree.RootItem.NounAttributes != null)
            {
                foreach (var attribute in currentTree.RootItem.NounAttributes)
                {
                    RDFOntologyDatatypeProperty prop = new RDFOntologyDatatypeProperty(new RDFResource(DDHubPrefix +  attribute.Name));
                    ontology.Model.PropertyModel.AddProperty(prop);
                    prop.SetDomain(current);
                    prop.SetRange(GetBaseTypeResource(attribute.Type).ToRDFOntologyClass());                         
                    prop.SetFunctional(true);

                    RDFOntologyCardinalityRestriction cardinalityRestriction = new RDFOntologyCardinalityRestriction(AttributeCardinalityRestriction, prop, 1, 1);
                    ontology.Model.ClassModel.AddRestriction(cardinalityRestriction);
                    ontology.Model.PropertyModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, prop, new RDFOntologyLiteral(new RDFPlainLiteral(attribute.Description, "En")));
                }
            }

            if (currentTree.Children != null)
            {
                foreach (var child in currentTree.Children)
                {
                    AddClass(child, current, ontology);
                }
            }
        }

        private static void AddVerb(Tree<Verb> currentTree, RDFOntologyObjectProperty parent, RDFOntology ontology)
        {
            var current = new RDFOntologyObjectProperty(new RDFResource(DDHubPrefix + currentTree.RootItem.Name));
            ontology.Model.PropertyModel.AddProperty(current);

            ontology.Model.PropertyModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, current, new RDFOntologyLiteral(new RDFPlainLiteral(currentTree.RootItem.Description, "En")));

            if (parent != null)
            {
                ontology.Model.PropertyModel.AddSubPropertyOfRelation(current, parent);
            }


            current.SetDomain(new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.DomainNounName)));
            current.SetRange(new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.RangeNounName)));

            if (currentTree.RootItem.MinCardinality > 0 || currentTree.RootItem.MaxCardinality > 0)
            {
                RDFOntologyCardinalityRestriction cardinalityRestriction = new RDFOntologyCardinalityRestriction(new RDFResource(DDHubPrefix + "DWSIVerbCardinalityRestriction" + currentTree.RootItem.Name), current, currentTree.RootItem.MinCardinality, currentTree.RootItem.MaxCardinality);
                ontology.Model.ClassModel.AddRestriction(cardinalityRestriction);
            }



            if (currentTree.Children != null)
            {
                foreach (var child in currentTree.Children)
                {
                    AddVerb(child, current, ontology);
                }
            }
        }

        private static RDFModelEnums.RDFDatatypes ConvertToLiteralType(string type)
        {
            switch (type.ToLower())
            {
                case "bool" or "boolean":
                    return RDFModelEnums.RDFDatatypes.XSD_BOOLEAN;
                case "int":
                    return RDFModelEnums.RDFDatatypes.XSD_INT;
                case "integer":
                    return RDFModelEnums.RDFDatatypes.XSD_INTEGER;
                case "float":
                    return RDFModelEnums.RDFDatatypes.XSD_FLOAT;
                case "double":
                    return RDFModelEnums.RDFDatatypes.XSD_DOUBLE;
                case "long":
                    return RDFModelEnums.RDFDatatypes.XSD_LONG;
                case "decimal":
                    return RDFModelEnums.RDFDatatypes.XSD_DECIMAL;
                case "short":
                    return RDFModelEnums.RDFDatatypes.XSD_SHORT;
                case "byte":
                    return RDFModelEnums.RDFDatatypes.XSD_BYTE;
                case "string":
                    return RDFModelEnums.RDFDatatypes.XSD_STRING;
                case "uint" or "unsignedint":
                    return RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDINT;
                case "ulong" or "unsignedlong":
                    return RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDLONG;

                default: return RDFModelEnums.RDFDatatypes.XSD_STRING;
            }


            // RDFSharp.Model.RDFVocabulary.XSD.FLOAT.ToRDFOntologyClass();
            return RDFModelEnums.RDFDatatypes.XSD_BOOLEAN;

        }

        public static RDFOntology AddInstance(RDFOntology ontology, DWISVocabulary vocabulary, DWISInstance instance)
        {
            foreach (var individual in instance.Population)
            {

                if (vocabulary.GetNoun(individual.TypeName, out Noun noun))
                {
                    var fact = new RDFOntologyFact(new RDFResource(DDHubPrefix + individual.Name));
                    ontology.Data.AddFact(fact);
                    var type = ontology.Model.ClassModel.SelectClass(DDHubPrefix + individual.TypeName);
                    ontology.Data.AddClassTypeRelation(fact, type);

                    if (individual.Attributes != null)
                    {
                        foreach (var attribute in individual.Attributes)
                        {
                            if (!string.IsNullOrEmpty(attribute.AttributeValue))
                            {
                                var property = ontology.Model.PropertyModel.SelectProperty(DDHubPrefix + attribute.AttributeName);
                                string attributeType = noun.NounAttributes.FirstOrDefault(na => na.Name == attribute.AttributeName).Type;

                                string attributeValue = attribute.AttributeValue.Replace(",", ".");
                                if (System.Text.Encoding.UTF8.GetByteCount(attributeValue) == attributeValue.Length)
                                {
                                    RDFTypedLiteral literal = new RDFTypedLiteral(attributeValue, ConvertToLiteralType(attributeType));
                                    ontology.Data.AddAssertionRelation(fact, (RDFOntologyDatatypeProperty)property, new RDFOntologyLiteral(literal));
                                }
                            }
                        }
                    } 
                }
            }

            foreach (var ca in instance.ClassAssertions)
            {
                var type = ontology.Model.ClassModel.SelectClass(DDHubPrefix + ca.Class);
                var fact = ontology.Data.SelectFact(DDHubPrefix + ca.Subject);
                ontology.Data.AddClassTypeRelation(fact, type);
            }

            foreach (var sentence in instance.Sentences)
            {
                var verb = ontology.Model.PropertyModel.SelectProperty(DDHubPrefix + sentence.Verb);
                var subjectFact = ontology.Data.SelectFact(DDHubPrefix + sentence.Subject);
                var objectFact = ontology.Data.SelectFact(DDHubPrefix + sentence.Object);
                ontology.Data.AddAssertionRelation(subjectFact, (RDFOntologyObjectProperty)verb, objectFact);
            }

            return ontology;
        }

    }
}
