using System;
using System.Collections;
using System.Collections.Generic;
using DWIS.Vocabulary.Development;
using DWIS.Vocabulary.Utils;
using RDFSharp.Model;
using RDFSharp.Semantics.OWL;

namespace DWIS.Vocabulary.OWL
{
    public static class OntologyGeneration
    {
        public static string DDHubPrefix = "http://ddhub.no/";
        public static string SemanticNamespaceSuffix = "Semantics";


        public static RDFOntology GetOntology(DWIS.Vocabulary.Development.DWISVocabulary vocabulary)
        {
            string ontologyName = "DWISVocabulary";

            vocabulary.ToTrees(out Tree<Noun> nounTree, out Tree<Verb> verbTree);

            string versionInfo = "0.1";
            string comment = "This is the ontology generated by the D-WIS WG1: Semantics of Real-time signals. It has been automatically generated from the vocabulary defined at https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development/auto-generated";
            string label = "D-WIS vocabulary";
            string definedBy = "D-WIS WG1: Semantics of Real-time signals";
            string iri = "https://github.com/D-WIS/DDHub-Semantic-Interoperability/tree/main/docs/vocabulary_development/auto-generated/dwis.owl";


            RDFNamespaceRegister.AddNamespace(new RDFNamespace("ddhub", DDHubPrefix));

            RDFOntology ontology = new RDFOntology(new RDFResource(DDHubPrefix + ontologyName));

            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, new RDFOntologyLiteral(new RDFPlainLiteral(comment, "En")));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionInfo, new RDFOntologyLiteral(new RDFTypedLiteral(versionInfo, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Label, new RDFOntologyLiteral(new RDFTypedLiteral(label, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.IsDefinedBy, new RDFOntologyLiteral(new RDFTypedLiteral(definedBy, RDFModelEnums.RDFDatatypes.XSD_STRING)));
            ontology.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionIRI, new RDFOntologyLiteral(new RDFTypedLiteral(iri, RDFModelEnums.RDFDatatypes.XSD_ANYURI)));


            AddClass(nounTree, null, ontology);
            AddVerb(verbTree, null, ontology);

            return ontology;
        }
        public static RDFOntology GenerateOntology(string fileName, DWIS.Vocabulary.Development.DWISVocabulary vocabulary)
        {
            var ontology = GetOntology(vocabulary);

            var gr = ontology.ToRDFGraph(RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None);

            ontology.ToRDFGraph(RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None).ToFile(RDFModelEnums.RDFFormats.Turtle, fileName + ".ttl");
            ontology.ToRDFGraph(RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None).ToFile(RDFModelEnums.RDFFormats.NTriples, fileName + ".nt");
            ontology.ToRDFGraph(RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None).ToFile(RDFModelEnums.RDFFormats.RdfXml, fileName + ".xml");

            return ontology;
        }

        private static RDFResource AttributeCardinalityRestriction = new RDFResource(DDHubPrefix + "DWISAttributeCardinalityRestriction");


        private static void AddClass(Tree<Noun> currentTree, RDFOntologyClass parent, RDFOntology ontology)
        {
            var current = new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.Name));
            ontology.Model.ClassModel.AddClass(current);
            ontology.Model.ClassModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, current, new RDFOntologyLiteral(new RDFPlainLiteral(currentTree.RootItem.Description, "En")));

            if (parent != null)
            {
                ontology.Model.ClassModel.AddSubClassOfRelation(current, parent);
            }
            if (currentTree.RootItem.NounAttributes != null)
            {
                foreach (var attribute in currentTree.RootItem.NounAttributes)
                {
                    RDFOntologyDatatypeProperty prop = new RDFOntologyDatatypeProperty(new RDFResource(DDHubPrefix +  attribute.Name));
                    ontology.Model.PropertyModel.AddProperty(prop);
                    prop.SetDomain(current);
                    prop.SetRange(RDFSharp.Model.RDFVocabulary.XSD.FLOAT.ToRDFOntologyClass());
                    prop.SetFunctional(true);
                    RDFOntologyCardinalityRestriction cardinalityRestriction = new RDFOntologyCardinalityRestriction(AttributeCardinalityRestriction, prop, 1, 1);
                    ontology.Model.ClassModel.AddRestriction(cardinalityRestriction);
                    ontology.Model.PropertyModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, prop, new RDFOntologyLiteral(new RDFPlainLiteral(attribute.Description, "En")));
                }
            }

            if (currentTree.Children != null)
            {
                foreach (var child in currentTree.Children)
                {
                    AddClass(child, current, ontology);
                }
            }
        }

        private static void AddVerb(Tree<Verb> currentTree, RDFOntologyObjectProperty parent, RDFOntology ontology)
        {
            var current = new RDFOntologyObjectProperty(new RDFResource(DDHubPrefix + currentTree.RootItem.Name));
            ontology.Model.PropertyModel.AddProperty(current);

            ontology.Model.PropertyModel.AddStandardAnnotation(RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment, current, new RDFOntologyLiteral(new RDFPlainLiteral(currentTree.RootItem.Description, "En")));

            if (parent != null)
            {
                ontology.Model.PropertyModel.AddSubPropertyOfRelation(current, parent);
            }


            current.SetDomain(new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.DomainNounName)));
            current.SetRange(new RDFOntologyClass(new RDFResource(DDHubPrefix + currentTree.RootItem.RangeNounName)));

            if (currentTree.RootItem.MinCardinality > 0 || currentTree.RootItem.MaxCardinality > 0)
            {
                RDFOntologyCardinalityRestriction cardinalityRestriction = new RDFOntologyCardinalityRestriction(new RDFResource(DDHubPrefix + "DWSIVerbCardinalityRestriction" + currentTree.RootItem.Name), current, currentTree.RootItem.MinCardinality, currentTree.RootItem.MaxCardinality);
                ontology.Model.ClassModel.AddRestriction(cardinalityRestriction);
            }



            if (currentTree.Children != null)
            {
                foreach (var child in currentTree.Children)
                {
                    AddVerb(child, current, ontology);
                }
            }
        }




        private static string ConvertToLiteralType(string type)
        {
            // RDFSharp.Model.RDFVocabulary.XSD.FLOAT.ToRDFOntologyClass();
            return RDFModelEnums.RDFDatatypes.XSD_BOOLEAN.ToString();

        }
    }
}
